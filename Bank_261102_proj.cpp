#include<bits/stdc++.h>

#include<windows.h>

using namespace std;
int j = 0;
int cursor = 0;
int end = 0;
string page = "main";
struct People {
  string id;
  string name;
  string pin;
  long double money;
};
string file_name = "bank_data.txt";
vector < People > all_customers;
set < string > find_id;
set < string > ::iterator del_id;
int num, num_transfer, state;
long double pin_mon;
void update_data() {
  ofstream out(file_name);
  for (int i = 0; i < all_customers.size(); i++) {
    out << all_customers[i].id << "," << all_customers[i].name << "," << all_customers[i].pin << "," << all_customers[i].money << endl;
  }
  out.close();
}
void history(string acc, string add) {
  string textline;
  ifstream his(acc + ".txt");
  vector < string > n;
  while (getline(his, textline)) {
    n.push_back(textline);
  }
  his.close();
  ofstream hist(acc + ".txt");
  for (int i = 0; i < n.size(); i++) {
    hist << n[i] << endl;
  }
  hist << add << endl;
  hist.close();

}
void update_mon_data() {
  for (int i = 0; i < all_customers.size(); i++) {
    history(all_customers[i].id, "+" + to_string(all_customers[i].money * 0.014) + " From Interest [Money]--->" + to_string(all_customers[i].money * 1.014));
    all_customers[i].money = all_customers[i].money * 1.014;

  }
}
void find_id_all(string, string);
string create_otp() { //create otp
  string otp = "";
  string set[36] = {
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "H",
    "I",
    "J",
    "K",
    "L",
    "M",
    "N",
    "O",
    "P",
    "Q",
    "R",
    "S",
    "T",
    "U",
    "V",
    "W",
    "X",
    "Y",
    "Z"
  };
  int cur;
  for (int i = 0; i < 6; i++) {
    cur = rand() % 36;
    otp = otp + set[cur];
  }
  return otp;
}

void print_money(string s, string space) {
  string text[11][4] = {
    {
      "  __  ",
      " /  \\ ",
      "| () |",
      " \\__/ "
    }, //0
    {
      " _ ",
      "/ |",
      "| |",
      "|_|"
    }, //1
    {
      " ___ ",
      "|_  )",
      " / / ",
      "/___|"
    }, //2
    {
      " ____",
      "|__ /",
      " |_ \\",
      "|___/"
    }, //3
    {
      " _ _  ",
      "| | | ",
      "|_  _|",
      "  |_| "
    }, //4
    {
      " ___ ",
      "| __|",
      "|__ \\",
      "|___/"
    }, //5
    {
      "  __ ",
      " / / ",
      "/ _ \\",
      "\\___/"
    }, //6
    {
      " ____ ",
      "|__  |",
      "  / / ",
      " /_/  "
    }, //7
    {
      " ___ ",
      "( _ )",
      "/ _ \\",
      "\\___/"
    }, //8
    {
      " ___ ",
      "/ _ \\",
      "\\_, /",
      " /_/ "
    }, //9
    {
      "   ",
      "   ",
      " _ ",
      "(_)"
    } //.
  };

  for (int i = 0; i < 4; i++) {
    cout << space << " ";
    for (int j = 0; j < s.size(); j++) {
      int index = s[j] - 48;
      if (s[j] == '.') {
        index = 10;
      }
      cout << text[index][i];
    }
    cout << endl;
  }
}
void print_text_small(string s, string space) {
  for (int i = 0; i < s.size(); i++) {
    s[i] = toupper(s[i]);
  }

  string text_char[38][3] = {
    {
      " __ ",
      "/  \\",
      "\\__/"
    }, //0
    {
      "   ",
      " /|",
      "  |"
    }, //1
    {
      " __ ",
      "  _)",
      " /__"
    }, //2
    {
      " __ ",
      "  _)",
      " __)"
    }, //3
    {
      "     ",
      " |__|",
      "    |"
    }, //4
    {
      " __ ",
      " |_ ",
      " __)"
    }, //5
    {
      " __ ",
      "/__ ",
      "\\__)"
    }, //6
    {
      " ___",
      "   /",
      "  / "
    }, //7
    {
      " __ ",
      "(__)",
      "(__)"
    }, //8
    {
      " __ ",
      "(__\\",
      " __/"
    }, //9
    {
      "    ",
      " /\\ ",
      "/--\\"
    }, //a
    {
      " __ ",
      "|__)",
      "|__)"
    }, //b
    {
      " __",
      "/  ",
      "\\__"
    }, //c
    {
      " __ ",
      "|  \\",
      "|__/"
    }, //d
    {
      " __",
      "|_ ",
      "|__"
    }, //e
    {
      " __",
      "|_ ",
      "|  "
    }, //f
    {
      " __ ",
      "/ _ ",
      "\\__)"
    }, //g
    {
      "    ",
      "|__|",
      "|  |"
    }, //h
    {
      "  ",
      "| ",
      "| "
    }, //i
    {
      "   ",
      "  |",
      "__)"
    }, //j
    {
      "   ",
      "|_/",
      "| \\"
    }, //k
    {
      "   ",
      "|  ",
      "|__"
    }, //l
    {
      "    ",
      "|\\/|",
      "|  |"
    }, //m
    {
      "    ",
      "|\\ |",
      "| \\|"
    }, //n
    {
      " __ ",
      "/  \\",
      "\\__/"
    }, //o
    {
      " __ ",
      "|__)",
      "|   "
    }, //p
    {
      " __ ",
      "/  \\",
      "\\_\\/"
    }, //q
    {
      " __ ",
      "|__)",
      "| \\ "
    }, //r
    {
      " __ ",
      "(_  ",
      "__) "
    }, //s
    {
      "___",
      " | ",
      " | "
    }, //t
    {
      "    ",
      "/  \\",
      "\\__/"
    }, //u
    {
      "    ",
      "\\  /",
      " \\/ "
    }, //v
    {
      "    ",
      "|  |",
      "|/\\|"
    }, //w    
    {
      "   ",
      "\\_/",
      "/ \\"
    }, //x    
    {
      "   ",
      "\\_/",
      " | "
    }, //y     
    {
      "___",
      " _/",
      "/__"
    }, //z 
    {
      " ",
      " ",
      "."
    }, //. 
    {
      "  ",
      "  ",
      "  "
    } //space
  };
  for (int i = 0; i < 3; i++) {
    cout << space;
    for (int j = 0; j < s.size(); j++) {
      int index = s[j] - 55;
      if (s[j] >= 48 && s[j] <= 57) {
        index = s[j] - 48;
      }
      if (s[j] == '.') {
        index = 36;
      }
      if (s[j] == ' ') {
        index = 37;
      }
      cout << text_char[index][i] << " ";
    }
    cout << endl;
  }
}
void print_text(string s, string space) {
  for (int i = 0; i < s.size(); i++) {
    s[i] = toupper(s[i]);
  }
  string text_char[38][5] = {
    {
      "   ___  ",
      "  / _ \\ ",
      " | |_| |",
      " | |_| |",
      "  \\___/ "
    }, //0
    {
      "  _ ",
      " / |",
      " | |",
      " | |",
      " |_|"
    }, //1
    {
      "  ____  ",
      " |___ \\ ",
      "   __) |",
      "  / __/ ",
      " |_____|"
    }, //2
    {
      "  _____ ",
      " |___ / ",
      "   |_ \\ ",
      "  ___) |",
      " |____/ "
    }, //3
    {
      "  _  _   ",
      " | || |  ",
      " | || |_ ",
      " |__   _|",
      "    |_|  "
    }, //4
    {
      "  ____  ",
      " | ___| ",
      " |___ \\ ",
      "  ___) |",
      " |____/ "
    }, //5
    {
      "   __   ",
      "  / /_  ",
      " | '_ \\ ",
      " | (_) |",
      "  \\___/ "
    }, //6
    {
      "  _____ ",
      " |___  |",
      "    / / ",
      "   / /  ",
      "  /_/   "
    }, //7
    {
      "   ___  ",
      "  ( _ ) ",
      "  / _ \\ ",
      " | (_) |",
      "  \\___/ "
    }, //8
    {
      "   ___  ",
      "  / _ \\ ",
      " | (_) |",
      "  \\__, |",
      "    /_/ "
    }, //9
    {
      "    _    ",
      "   / \\   ",
      "  / _ \\  ",
      " / ___ \\ ",
      "/_/   \\_\\"
    }, //a
    {
      " ____  ",
      "| __ ) ",
      "|  _ \\ ",
      "| |_) |",
      "|____/ "
    }, //b
    {
      "  ____ ",
      " / ___|",
      "| |    ",
      "| |___ ",
      " \\____|"
    }, //c
    {
      " ____  ",
      "|  _ \\ ",
      "| | | |",
      "| |_| |",
      "|____/ "
    }, //d
    {
      " _____ ",
      "| ____|",
      "|  _|  ",
      "| |___ ",
      "|_____|"
    }, //e
    {
      " _____ ",
      "|  ___|",
      "| |_   ",
      "|  _|  ",
      "|_|    "
    }, //f
    {
      "  ____ ",
      " / ___|",
      "| |  _ ",
      "| |_| |",
      " \\____|"
    }, //g
    {
      " _   _ ",
      "| | | |",
      "| |_| |",
      "|  _  |",
      "|_| |_|"
    }, //h
    {
      " ___ ",
      "|_ _|",
      " | | ",
      " | | ",
      "|___|"
    }, //i
    {
      "     _ ",
      "    | |",
      " _  | |",
      "| |_| |",
      " \\___/ "
    }, //j
    {
      " _  __",
      "| |/ /",
      "| ' / ",
      "| . \\ ",
      "|_|\\_\\"
    }, //k
    {
      " _     ",
      "| |    ",
      "| |    ",
      "| |___ ",
      "|_____|"
    }, //l
    {
      " __  __ ",
      "|  \\/  |",
      "| |\\/| |",
      "| |  | |",
      "|_|  |_|"
    }, //m
    {
      " _   _ ",
      "| \\ | |",
      "|  \\| |",
      "| |\\  |",
      "|_| \\_|"
    }, //n
    {
      "  ___  ",
      " / _ \\ ",
      "| | | |",
      "| |_| |",
      " \\___/ "
    }, //o
    {
      " ____  ",
      "|  _ \\ ",
      "| |_) |",
      "|  __/ ",
      "|_|    "
    }, //p
    {
      "  ___  ",
      " / _ \\ ",
      "| | | |",
      "| |_| |",
      " \\__\\_\\"
    }, //q
    {
      " ____  ",
      "|  _ \\ ",
      "| |_) |",
      "|  _ < ",
      "|_| \\_\\"
    }, //r
    {
      " ____  ",
      "/ ___| ",
      "\\___ \\ ",
      " ___) |",
      "|____/ "
    }, //s
    {
      " _____ ",
      "|_   _|",
      "  | |  ",
      "  | |  ",
      "  |_|  "
    }, //t
    {
      " _   _ ",
      "| | | |",
      "| | | |",
      "| |_| |",
      " \\___/ "
    }, //u
    {
      "__     __",
      "\\ \\   / /",
      " \\ \\ / / ",
      "  \\ V /  ",
      "   \\_/   "
    }, //v
    {
      "__        __",
      "\\ \\      / /",
      " \\ \\ /\\ / / ",
      "  \\ V  V /  ",
      "   \\_/\\_/   "
    }, //w
    {
      "__  __",
      "\\ \\/ /",
      " \\  / ",
      " /  \\ ",
      "/_/\\_\\"
    }, //x
    {
      "__   __",
      "\\ \\ / /",
      " \\ V / ",
      "  | |  ",
      "  |_|  "
    }, //y
    {
      " _____",
      "|__  /",
      "  / / ",
      " / /_ ",
      "/____|"
    }, //z
    {
      "   ",
      "   ",
      "   ",
      " _ ",
      "(_)"
    }, //. 
    {
      "   ",
      "   ",
      "   ",
      "   ",
      "   "
    } //space
  };
  for (int i = 0; i < 5; i++) {
    cout << space;
    for (int j = 0; j < s.size(); j++) {
      int index = s[j] - 55;
      if (s[j] >= 48 && s[j] <= 57) {
        index = s[j] - 48;
      }
      if (s[j] == '.') {
        index = 36;
      }
      if (s[j] == ' ') {
        index = 37;
      }
      cout << text_char[index][i] << " ";
    }
    cout << endl;
  }
}

//minigame
string Map_1[10][36];

int Hp = 100;
int MaxHp = 100;
int Level = 1;

void reset_map() {

  //Map 1 reset
  Map_1[0][0] = "                                  ##########################################################################################          ";
  Map_1[0][1] = "                                  #                     ###                   ###                   ###                    #";
  Map_1[0][2] = "                                  #                     ###                   ###                   ###                    #";
  Map_1[0][3] = "                                  #                     ###                   ###                   ###                    #";
  Map_1[0][4] = "                                  #                     ###                   ###                   ###                    #";
  Map_1[0][5] = "                                  #                     ###                   ###                   ###                    #";
  Map_1[0][6] = "                                  #          *          ###                   ###                   ###                    #";
  Map_1[0][7] = "                                  #                     ###        *          ###                   ###     *              #";
  Map_1[0][8] = "                                  #                     ###                   ###                   ###                    #";
  Map_1[0][9] = "                                  #                     ###                   ###                   ###                    #";
  Map_1[0][10] = "                                  #########################                   ###          *        ########################";
  Map_1[0][11] = "                                  #     *   #           ###                   ###                   ###          #         #";
  Map_1[0][12] = "                                  #         #           ###                   ###                   ###          #   *     #";
  Map_1[0][13] = "                                  ###########           ###                   ###                   ###          ###########";
  Map_1[0][14] = "                                  #                     ###                   ###                   ###                    #";
  Map_1[0][15] = "                                  #                     ###                   ###                   ###                    #";
  Map_1[0][16] = "                                  #             *       ###############################################                    #";
  Map_1[0][17] = "                                  #         P    *     H      !                                                            #";
  Map_1[0][18] = "                                  #             *       ###############################################                    #";
  Map_1[0][19] = "                                  #                     ###                   ###                   ###                    #";
  Map_1[0][20] = "                                  #                     ###                   ###                   ###                    #";
  Map_1[0][21] = "                                  ###########           ###                   ###                   ###          ###########";
  Map_1[0][22] = "                                  #     *   #           ###                   ###                   ###          #    *    #";
  Map_1[0][23] = "                                  #         #           ###                   ###                   ###          #         #";
  Map_1[0][24] = "                                  #########################                   ###                   ########################";
  Map_1[0][25] = "                                  #                     ###                   ###                   ###                    #";
  Map_1[0][26] = "                                  #                     ###                   ###                   ###                    #";
  Map_1[0][27] = "                                  #                     ###                   ###                   ###                    #";
  Map_1[0][28] = "                                  #                     ###                   ###                   ###                    #";
  Map_1[0][29] = "                                  #                     ###           *       ###                   ###                    #";
  Map_1[0][30] = "                                  #             *       ###                   ###       *           ###        *           #";
  Map_1[0][31] = "                                  #                     ###                   ###                   ###                    #";
  Map_1[0][32] = "                                  #                     ###                   ###                   ###                    #";
  Map_1[0][33] = "                                  #                     ###                   ###                   ###                    #";
  Map_1[0][34] = "                                  #                     ###                   ###                   ###                    #";
  Map_1[0][35] = "                                  ##########################################################################################           ";

  //Map 2 reset
  Map_1[1][0] = "                                  ##########################################################################################           ";
  Map_1[1][1] = "                                  #                                                                                        #";
  Map_1[1][2] = "                                  #                                                                                *       #";
  Map_1[1][3] = "                                  #           ###############           ###############           ###############          #";
  Map_1[1][4] = "                                  #    ##     ###############           ###############           ###############    ##    #";
  Map_1[1][5] = "                                  #    ##     ###############           ###         ###           ###############    ##    #";
  Map_1[1][6] = "                                  #    ##     ###############     *     ###   ###   ###           ###############    ##    #";
  Map_1[1][7] = "                                  #    ##     ###############           ###   ###   ###           ###############    ##    #";
  Map_1[1][8] = "                                  #    ##                                     ###                                    ##    #";
  Map_1[1][9] = "                                  #    ##                                     ###                                    ##    #";
  Map_1[1][10] = "                                  #    ###########               ##           ###          ##               ###########    #";
  Map_1[1][11] = "                                  #    ###########              ####          ###         ####              ###########    #";
  Map_1[1][12] = "                                  #                            ######         ###        ######                            #";
  Map_1[1][13] = "                                  #                          ##########       ###      ##########                          #";
  Map_1[1][14] = "                                  #                            ######         ###        ######                *           #";
  Map_1[1][15] = "                                  #                             ####          ###         ####                             #";
  Map_1[1][16] = "                                  #                              ##           ###          ##                              #";
  Map_1[1][17] = "                                  #                                           #                                            #";
  Map_1[1][18] = "                                  #                   P                       #!                                           #";
  Map_1[1][19] = "                                  #                              ##           ###          ##                              #";
  Map_1[1][20] = "                                  #                             ####          ###         ####                             #";
  Map_1[1][21] = "                                  #                            ######         ###        ######                            #";
  Map_1[1][22] = "                                  #                          ##########       ###      ##########                          #";
  Map_1[1][23] = "                                  #                            ######         ###        ######                            #";
  Map_1[1][24] = "                                  #    ###########              ####          ###         ####       *      ###########    #";
  Map_1[1][25] = "                                  #    ###########               ##           ###          ##               ###########    #";
  Map_1[1][26] = "                                  #    ##                                     ###                                    ##    #";
  Map_1[1][27] = "                                  #                                           ###                                          #";
  Map_1[1][28] = "                                  #    ##     ###############     *     ###   ###   ###           ###############    ##    #";
  Map_1[1][29] = "                                  #    ##     ###############           ###   ###   ###           ###############    ##    #";
  Map_1[1][30] = "                                  #    ##     ###############           ###         ###           ###############    ##    #";
  Map_1[1][31] = "                                  #    ##     ###############           ###############           ###############    ##    #";
  Map_1[1][32] = "                                  #           ###############           ###############           ###############          #";
  Map_1[1][33] = "                                  #                                                                                        #";
  Map_1[1][34] = "                                  #                                   *                                                    #";
  Map_1[1][35] = "                                  ##########################################################################################          ";

  //Map 3 reset
  Map_1[2][0] = "                                  ##########################################################################################          ";
  Map_1[2][1] = "                                  #                   ##                      ###                     ##                   #";
  Map_1[2][2] = "                                  #       #########   ##   #########          ###         #########   ##   #########       #";
  Map_1[2][3] = "                                  #       #                        #          ###         #                        #       #";
  Map_1[2][4] = "                                  #       #                 *      #          ###         #                        #       #";
  Map_1[2][5] = "                                  #       #                        #          ###         #          *             #       #";
  Map_1[2][6] = "                                  #                                                                                        #";
  Map_1[2][7] = "                                  #           #################                              ###################           #";
  Map_1[2][8] = "                                  #           #                                                                #           #";
  Map_1[2][9] = "                                  #           #              ##################################                #           #";
  Map_1[2][10] = "                                  #                                                                                        #";
  Map_1[2][11] = "                                  #########                                                                        #########";
  Map_1[2][12] = "                                  #########   ##                                                              ##      *   !#";
  Map_1[2][13] = "                                  #########   ##                 *                       *                    ##   #########";
  Map_1[2][14] = "                                  #           ##                                                              ##           #";
  Map_1[2][15] = "                                  #           ##                                                              ##           #";
  Map_1[2][16] = "                                  #           ##                                                              ##           #";
  Map_1[2][17] = "                                  #   ##################                                              ##################   #";
  Map_1[2][18] = "                                  #   ##################                *                             ################## H #";
  Map_1[2][19] = "                                  #           ##                                                              ##           #";
  Map_1[2][20] = "                                  #           ##                                                              ##           #";
  Map_1[2][21] = "                                  #           ##                                        *                     ##           #";
  Map_1[2][22] = "                                  #########   ##                                                              ##   #########";
  Map_1[2][23] = "                                  #P          ##                                                              ##   #########";
  Map_1[2][24] = "                                  #########                            *H                                          #########";
  Map_1[2][25] = "                                  #                                                                                        #";
  Map_1[2][26] = "                                  #           #                                                                #           #";
  Map_1[2][27] = "                                  #           #              ##################################                #           #";
  Map_1[2][28] = "                                  #           #################                              ###################           #";
  Map_1[2][29] = "                                  #                                                                                        #";
  Map_1[2][30] = "                                  #       #           *            #          ###         #                        #       #";
  Map_1[2][31] = "                                  #       #                        #          ###         #            *           #       #";
  Map_1[2][32] = "                                  #       #                        #          ###         #                        #       #";
  Map_1[2][33] = "                                  #       #########   ##   #########          ###         #########   ##   #########       #";
  Map_1[2][34] = "                                  #                   ##                      ###                     ##                   #";
  Map_1[2][35] = "                                  ##########################################################################################           ";

  //Map 4 reset
  Map_1[3][0] = "                                  ##########################################################################################                   ";
  Map_1[3][1] = "                                  #                                          #####                                        !#";
  Map_1[3][2] = "                                  #    ###########    ###    ###########     #####     ###########    ###    ###########   #";
  Map_1[3][3] = "                                  #                   ###                    #####                    ###                  #";
  Map_1[3][4] = "                                  #                #########                                       #########               #";
  Map_1[3][5] = "                                  #############       ###                     ###                     ###      #############";
  Map_1[3][6] = "                                  #                   ###                     ###                     ###                  #";
  Map_1[3][7] = "                                  #                       *                #########        *                           H  #";
  Map_1[3][8] = "                                  #############    ###                        ###                        ###   #############";
  Map_1[3][9] = "                                  #                ###                        ###                        ###               #";
  Map_1[3][10] = "                                  #          ###############        #                     #        ###############         #";
  Map_1[3][11] = "                                  #                                 #                     #                                #";
  Map_1[3][12] = "                                  #          ###############        #######################        ###############         #";
  Map_1[3][13] = "                                  #          #             #        #                     #        #             #         #";
  Map_1[3][14] = "                                  #          #             #        #                     #        #             #         #";
  Map_1[3][15] = "                                  #          ###############                   *                   ###############         #";
  Map_1[3][16] = "                                  #                                                                                        #";
  Map_1[3][17] = "                                  ############################################   ###########################################";
  Map_1[3][18] = "                                  #                                                                                        #";
  Map_1[3][19] = "                                  #          ###############        #######################        ###############         #";
  Map_1[3][20] = "                                  #          #             #        #                     #        #             #         #";
  Map_1[3][21] = "                                  #          #             #        #                     #        #             #         #";
  Map_1[3][22] = "                                  #          ###############        #######################        ###############         #";
  Map_1[3][23] = "                                  #                            #                              #                            #";
  Map_1[3][24] = "                                  #############                #      *                *      #                     *      #";
  Map_1[3][25] = "                                  #                            #              H               #                            #";
  Map_1[3][26] = "                                  #               *            #                              #                            #";
  Map_1[3][27] = "                                  #############      ###########                              ###########       ############";
  Map_1[3][28] = "                                  #                                                                                        #";
  Map_1[3][29] = "                                  #               ##     #############   ############   #############     ##               #";
  Map_1[3][30] = "                                  #               ##     #############   ############   #############     ##               #";
  Map_1[3][31] = "                                  #      P        ##     #############       ####       #############     ##               #";
  Map_1[3][32] = "                                  #               ##     #############       ####       #############     ##               #";
  Map_1[3][33] = "                                  #   ##############     #############       ####       #############     ##############   #";
  Map_1[3][34] = "                                  #                                                                                        #";
  Map_1[3][35] = "                                  ##########################################################################################               ";

  //Map 5 reset
  Map_1[4][0] = "                                  ##########################################################################################           ";
  Map_1[4][1] = "                                  #                                            P                                           #";
  Map_1[4][2] = "                                  #                                                                                        #";
  Map_1[4][3] = "                                  #     #################     ##################################     #################     #";
  Map_1[4][4] = "                                  #                                                                                        #";
  Map_1[4][5] = "                                  #        *                                                                               #";
  Map_1[4][6] = "                                  #                                #       #       #      #                 *              #";
  Map_1[4][7] = "                                  #                                #       #       #      #                                #";
  Map_1[4][8] = "                                  #              #########         #       #   *   #      #         #########              #";
  Map_1[4][9] = "                                  #                                #       #       #      #                                #";
  Map_1[4][10] = "                                  #       #########                #       #       #      #                #########       #";
  Map_1[4][11] = "                                  #                                                                                        #";
  Map_1[4][12] = "                                  #              #########                                          #########              #";
  Map_1[4][13] = "                                  #                                                                                        #";
  Map_1[4][14] = "                                  #              #########    ###################################   #########              #";
  Map_1[4][15] = "                                  #                           #                !                #                          #";
  Map_1[4][16] = "                                  #      *       #########    #                                 #   #########              #";
  Map_1[4][17] = "                                  #              #########    #                                 #   #########        *     #";
  Map_1[4][18] = "                                  #                           #      *         *        *       #                          #";
  Map_1[4][19] = "                                  #              #########    #                                 #   #########              #";
  Map_1[4][20] = "                                  #                           #           *         *           #                          #";
  Map_1[4][21] = "                                  #              #########    #                                 #   #########              #";
  Map_1[4][22] = "                                  #                           #############         #############                          #";
  Map_1[4][23] = "                                  #              #########                                          #########              #";
  Map_1[4][24] = "                                  #                                                                                        #";
  Map_1[4][25] = "                                  #       #########                #       #       #      #                #########       #";
  Map_1[4][26] = "                                  #                                #       #       #      #                                #";
  Map_1[4][27] = "                                  #              #########         #       #   *   #      #         #########              #";
  Map_1[4][28] = "                                  #                                #       #       #      #                                #";
  Map_1[4][29] = "                                  #          *                     #       #       #      #                                #";
  Map_1[4][30] = "                                  #                                                                             *          #";
  Map_1[4][31] = "                                  #                                                                                        #";
  Map_1[4][32] = "                                  #     #################     ##################################     #################     #";
  Map_1[4][33] = "                                  #                                                                                        #";
  Map_1[4][34] = "                                  #                                           HHH                                          #";
  Map_1[4][35] = "                                  ##########################################################################################               ";

  //Map 6 reset
  Map_1[5][0] = "                                  ##########################################################################################           ";
  Map_1[5][1] = "                                  #                                                                                        #";
  Map_1[5][2] = "                                  #                      *                                                                 #";
  Map_1[5][3] = "                                  #     ###############       ###############    ###############       ###############     #";
  Map_1[5][4] = "                                  #     #                                   #    #                                   #     #";
  Map_1[5][5] = "                                  #     #     ##########################    #    #    ##########################     #     #";
  Map_1[5][6] = "                                  #     #     #                        #    #    #    #                        #     #     #";
  Map_1[5][7] = "                                  #     #     #                        #    #    #    #                        #     #     #";
  Map_1[5][8] = "                                  #           P               *        #              *           *            H           #";
  Map_1[5][9] = "                                  #     #     #                        #    #    #    #                        #     #     #";
  Map_1[5][10] = "                                  #     #     #                        #    #    #    #                        #     #     #";
  Map_1[5][11] = "                                  #     #     ##########################    #    #    ##########################     #     #";
  Map_1[5][12] = "                                  #     #                                   #    #                                   #     #";
  Map_1[5][13] = "                                  #     ###############       ###############    ###############       ###############     #";
  Map_1[5][14] = "                                  #                                                                                        #";
  Map_1[5][15] = "                                  #                         ###############        ###############                         #";
  Map_1[5][16] = "                                  #                                        #      #                                        #";
  Map_1[5][17] = "                                  #   *                                     ##  ##                                         #";
  Map_1[5][18] = "                                  #                  *                      ## !##                           *             #";
  Map_1[5][19] = "                                  #                                        #      #                                        #";
  Map_1[5][20] = "                                  #                         ###############        ###############                         #";
  Map_1[5][21] = "                                  #                                                                                        #";
  Map_1[5][22] = "                                  #     ###############       ###############    ###############       ###############     #";
  Map_1[5][23] = "                                  #     #                                   #    #                                   #     #";
  Map_1[5][24] = "                                  #     #     ##########################    #    #    ##########################     #     #";
  Map_1[5][25] = "                                  #     #     #                        #    #    #    #                        #     #     #";
  Map_1[5][26] = "                                  #     #     #                        #    #    #    #                        #     #     #";
  Map_1[5][27] = "                                  #          **                        *              H                        #           #";
  Map_1[5][28] = "                                  #     #     #                        #    #    #    #                        #     #     #";
  Map_1[5][29] = "                                  #     #     #                        #    #    #    #                        #     #     #";
  Map_1[5][30] = "                                  #     #     ##########################    #    #    ##########################     #     #";
  Map_1[5][31] = "                                  #     #                                   #    #                                   #     #";
  Map_1[5][32] = "                                  #     ###############       ###############    ###############       ###############     #";
  Map_1[5][33] = "                                  #                                                                                        #";
  Map_1[5][34] = "                                  #                                                                                        #";
  Map_1[5][35] = "                                  ##########################################################################################             ";

  //Map 7 reset
  Map_1[6][0] = "                                  ##########################################################################################               ";
  Map_1[6][1] = "                                  #                                                                                        #";
  Map_1[6][2] = "                                  #                                                                                    !   #";
  Map_1[6][3] = "                                  #      #####    #####    #####    #####    #####    #####    #####    #####   #####      #";
  Map_1[6][4] = "                                  #      #####    #####    #####    #####    #####    #####    #####    #####   #####      #";
  Map_1[6][5] = "                                  #      #####    #####    #####    #####    #####    #####    #####    #####   #####      #";
  Map_1[6][6] = "                                  #                                                                                        #";
  Map_1[6][7] = "                                  #                                                                                        #";
  Map_1[6][8] = "                                  #      #####    #####    #####    #####    #####    #####    #####    #####   #####      #";
  Map_1[6][9] = "                                  #      #####    #####    #####    #####    #####    #####    #####    #####   #####      #";
  Map_1[6][10] = "                                  #                                                                                        #";
  Map_1[6][11] = "                                  #                                                                                        #";
  Map_1[6][12] = "                                  #############                    #########################                   #############";
  Map_1[6][13] = "                                  #############       ##################################################       #############";
  Map_1[6][14] = "                                  #                   ##################################################                   #";
  Map_1[6][15] = "                                  #############                    #########################                   #############";
  Map_1[6][16] = "                                  #############                    #########################                   #############";
  Map_1[6][17] = "                                  #                                                                                        #";
  Map_1[6][18] = "                                  #                                          P                                             #";
  Map_1[6][19] = "                                  #############                    #########################                   #############";
  Map_1[6][20] = "                                  #############                    #########################                   #############";
  Map_1[6][21] = "                                  #                   ##################################################                   #";
  Map_1[6][22] = "                                  #############       ##################################################       #############";
  Map_1[6][23] = "                                  #############                    #########################                   #############";
  Map_1[6][24] = "                                  #                                                                                        #";
  Map_1[6][25] = "                                  #                                                                                        #";
  Map_1[6][26] = "                                  #      #####    #####    #####    #####    #####    #####    #####    #####   #####      #";
  Map_1[6][27] = "                                  #      #####    #####    #####    #####    #####    #####    #####    #####   #####      #";
  Map_1[6][28] = "                                  #                                                                                        #";
  Map_1[6][29] = "                                  #                                                                                        #";
  Map_1[6][30] = "                                  #      #####    #####    #####    #####    #####    #####    #####    #####   #####      #";
  Map_1[6][31] = "                                  #      #####    #####    #####    #####    #####    #####    #####    #####   #####      #";
  Map_1[6][32] = "                                  #      #####    #####    #####    #####    #####    #####    #####    #####   #####      #";
  Map_1[6][33] = "                                  #                                                                                        #";
  Map_1[6][34] = "                                  #                                                                                        #";
  Map_1[6][35] = "                                  ##########################################################################################                    ";

  //Map 8 reset
  Map_1[7][0] = "                                  ##########################################################################################                  ";
  Map_1[7][1] = "                                  #                                                                                        #";
  Map_1[7][2] = "                                  #                                                                      *                 #";
  Map_1[7][3] = "                                  #                                    H                                                   #";
  Map_1[7][4] = "                                  #      P                                                                                 #";
  Map_1[7][5] = "                                  #                                                  *                                     #";
  Map_1[7][6] = "                                  #                              *                               H                         #";
  Map_1[7][7] = "                                  #                                                                                        #";
  Map_1[7][8] = "                                  #                                              *                                         #";
  Map_1[7][9] = "                                  #                      *                                                                 #";
  Map_1[7][10] = "                                  #                                                                                        #";
  Map_1[7][11] = "                                  ######################################              ######################################";
  Map_1[7][12] = "                                                                       #              #";
  Map_1[7][13] = "                                                                       #              #";
  Map_1[7][14] = "                                                                       #              #";
  Map_1[7][15] = "                                                                       #       *      #";
  Map_1[7][16] = "                                                                       #              #";
  Map_1[7][17] = "                                                                       #              #";
  Map_1[7][18] = "                                                                       #              #";
  Map_1[7][19] = "                                                                       #              #";
  Map_1[7][20] = "                                                                       #     *        #";
  Map_1[7][21] = "                                                                       #              #";
  Map_1[7][22] = "                                                                       #              #";
  Map_1[7][23] = "                                                                       #              #";
  Map_1[7][24] = "                                  ######################################              ######################################";
  Map_1[7][25] = "                                  #                                                                                        #";
  Map_1[7][26] = "                                  #                                                                                        #";
  Map_1[7][27] = "                                  #                 H                                                 *                    #";
  Map_1[7][28] = "                                  #          *                                         *                                   #";
  Map_1[7][29] = "                                  #                                   H                                                    #";
  Map_1[7][30] = "                                  #                                                                                        #";
  Map_1[7][31] = "                                  #                                                   *                                    #";
  Map_1[7][32] = "                                  #                     *                                                      !           #";
  Map_1[7][33] = "                                  #                                                                                        #";
  Map_1[7][34] = "                                  #                                                                                        #";
  Map_1[7][35] = "                                  ##########################################################################################                 ";

  //Map 9 reset
  Map_1[8][0] = "                                  ##########################################################################################                     ";
  Map_1[8][1] = "                                  #                                                                                        #";
  Map_1[8][2] = "                                  #    ##########     ##########       #################      ##########     ##########    #";
  Map_1[8][3] = "                                  #    #                       #       #               #      #                       #    #";
  Map_1[8][4] = "                                  #    #              *        #       #               #      #                       #    #";
  Map_1[8][5] = "                                  #    #                       #       #          *    #      #                       #    #";
  Map_1[8][6] = "                                  #             #     #                #       #       #               #     #             #";
  Map_1[8][7] = "                                  #             #     #                #       #       #               #     #             #";
  Map_1[8][8] = "                                  #             #     #                #       #       #               #     #             #";
  Map_1[8][9] = "                                  #    ##########  *  ##########    *  #       #       #      ##########     ##########    #";
  Map_1[8][10] = "                                  #                                            #                                           #";
  Map_1[8][11] = "                                  #    ##########     ##########       #################      ##########     ##########    #";
  Map_1[8][12] = "                                  #             #     #                                                #     #   *H        #";
  Map_1[8][13] = "                                  #             #     #    #                                *     #    #     #             #";
  Map_1[8][14] = "                                  #             #     #    #                                      #    #     #             #";
  Map_1[8][15] = "                                  #                        #        ########  #  #  #######       #                        #";
  Map_1[8][16] = "                                  ##########               #  *     #!     #  #  #  #     #       #               ##########";
  Map_1[8][17] = "                                  #                        #        #      #* #  # *#  *  #       #          *             #";
  Map_1[8][18] = "                                  #            *           #        #      ####  ####     #       #                        #";
  Map_1[8][19] = "                                  ##########               #        #                     #       #               ##########";
  Map_1[8][20] = "                                  #                        #        #######################       #                        #";
  Map_1[8][21] = "                                  #             #     #    #                                      #    #     #             #";
  Map_1[8][22] = "                                  #      P      #     #    #                        *             #    #     #             #";
  Map_1[8][23] = "                                  #             #     #                                                #     #             #";
  Map_1[8][24] = "                                  #    ##########     ##########       #################      ##########     ##########    #";
  Map_1[8][25] = "                                  #                 *                          #                                           #";
  Map_1[8][26] = "                                  #    ##########     ##########       #       #       #      ##########     ##########    #";
  Map_1[8][27] = "                                  #             #     #                #       #       #               #     #             #";
  Map_1[8][28] = "                                  #             #     #                #       #       #               #     #             #";
  Map_1[8][29] = "                                  #             #     #                #       #       #       *       #     #             #";
  Map_1[8][30] = "                                  #    #                       #       #               #               #     #    *        #";
  Map_1[8][31] = "                                  #    #           *           #       #        *      #               #     #             #";
  Map_1[8][32] = "                                  #    #                       #       #               #               #     #             #";
  Map_1[8][33] = "                                  #    ##########     ##########       #################      ##########     ##########    #";
  Map_1[8][34] = "                                  #                                                                                        #";
  Map_1[8][35] = "                                  ##########################################################################################              ";

  //Map 10 reset
  Map_1[9][0] = "                                  ##########################################################################################              ";
  Map_1[9][1] = "                                  #           #     # ####### #       #       #######                                      #";
  Map_1[9][2] = "                                  #           #     # #       #       #       #     #                                      #";
  Map_1[9][3] = "                                  #           ####### #####   #       #       #     #               *                      #";
  Map_1[9][4] = "                                  #           #     # #       #       #       #     #                                      #";
  Map_1[9][5] = "                                  #           #     # ####### ####### ####### #######                                      #";
  Map_1[9][6] = "                                  #                                                                   *                    #";
  Map_1[9][7] = "                                  #           #    #    #    ######  #     #                                               #";
  Map_1[9][8] = "                                  #           #   #    # #   #     # ##    #                                *              #";
  Map_1[9][9] = "                                  #           #! #    #   #  #     # # #   #      H                                        #";
  Map_1[9][10] = "                                  #           ###    #     # ######  #  #  #                                               #";
  Map_1[9][11] = "                                  #           #  #   ####### #   #   #   # #                      *                        #";
  Map_1[9][12] = "                                  #           #   #  #     # #    #  #    ##                       *                       #";
  Map_1[9][13] = "                                  #           #    # #     # #     # #     #    *                                *         #";
  Map_1[9][14] = "                                  #     *                                    *                                             #";
  Map_1[9][15] = "                                  #                                                                                        #";
  Map_1[9][16] = "                                  #                             *                                                          #";
  Map_1[9][17] = "                                  #           #    #    #     #####  ####### #     #  #####  ### #######                   #";
  Map_1[9][18] = "                                  #           #   #    # #   #     # #       ##   ## #     #  #     #                      #";
  Map_1[9][19] = "                                  #           #  #    #   #  #       #       # # # # #        #     #                      #";
  Map_1[9][20] = "                                  #       H   ###    #     #  #####  #####   #  #  #  #####   #     #                      #";
  Map_1[9][21] = "                                  #           #  #   #######       # #       #     #       #  #     #            *         #";
  Map_1[9][22] = "                                  #           #   #  #     # #     # #       #     # #     #  #     #       *              #";
  Map_1[9][23] = "                                  #           #    # #     #  #####  ####### #     #  #####  ###    #                      #";
  Map_1[9][24] = "                                  #    *            *                                                                      #";
  Map_1[9][25] = "                                  #                                               H                                        #";
  Map_1[9][26] = "                                  #                                    *                                          *        #";
  Map_1[9][27] = "                                  #       *    #####  ### #     # #######       #       ######  #       #######            #";
  Map_1[9][28] = "                                  #           #     #  #  #     # #            # #      #     # #            #             #";
  Map_1[9][29] = "                                  #           #        #  #     # #           #   #     #     # #           #              #";
  Map_1[9][30] = "                                  #           #  ####  #  #     # #####      #     #    ######  #          #       *       #";
  Map_1[9][31] = "                                  #           #     #  #   #   #  #          #######    #       #         #                #";
  Map_1[9][32] = "                                  #           #   P #  #    # #   #          #     #    #       #        #                 #";
  Map_1[9][33] = "                                  #            #####  ###    #    #######    #     #    #       ####### #######            #";
  Map_1[9][34] = "                                  #                                                                                        #";
  Map_1[9][35] = "                                  ##########################################################################################               ";

  //map1 change
  for (int i = 0; i < 10; i++) {
    for (int y = 0; y < 36; y++) {
      for (int x = 0; x < Map_1[i][y].size(); x++) {
        if (Map_1[i][y][x] == '#') {
          Map_1[i][y][x] = 219;
        }
      }
    }
  }

}
void mini_game_1() {
  reset_map();
  int oldLevel = 1;
  Hp = 100;
  //Map Starto
  while (true) {
    system("cls");
    
    if ( oldLevel % 10 < ::Level)
    {
    	reset_map();
    	oldLevel = ::Level;
    	Hp = 100;
	}
    
    
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
    print_text_small("Level " + to_string(Level), "\t\t\t\t\t\t\t\t");
    cout << endl;

    for (int y = 0; y < 36; y++) {
      for (int x = 0; x < Map_1[Level - 1][y].size(); x++) {
        if (Map_1[Level - 1][y][x] == '*') {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 12);
        } else if (Map_1[Level - 1][y][x] == 'P') {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);
        } else if (Map_1[Level - 1][y][x] == 'H') {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 11);
        } else if (Map_1[Level - 1][y][x] == '!') {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);
        } else {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
        }
        cout << Map_1[Level - 1][y][x];

      }
      cout << endl;

    }
    cout << "Hp : " << Hp << "/" << MaxHp << endl << "Press Arrow To Move.\nP is player.\n* is enemy.\nH is heal.\n! is goal.\n";
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 13);
    printf("\n\n\n\n\n\n\t.__ .__ .___ __. __.   __..__ .__. __ .___.__ .__..__   .___..__.  .__ .__. __ .  .\n");
    printf("\t[__)[__)[__ (__ (__   (__ [__)[__]/  `[__ [__)[__][__)    |  |  |  [__)[__]/  `|_/ \n");
    printf("\t|   |  \\[___.__).__)  .__)|   |  |\\__.[___[__)|  ||  \\    |  |__|  [__)|  |\\__.|  \\\n"); //cout<<page;
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0);
    system("pause");

    for (int y = 0; y < 36; y++) {
      for (int x = 0; x < Map_1[Level - 1][y].size(); x++) {
        switch (Map_1[Level - 1][y][x]) {
        case '#':
          {
            Map_1[Level - 1][y][x] = 219;
          }
          break;
        case 'P':
          {
            if (GetAsyncKeyState(VK_UP) != 0) //Up
            {
              int y2 = (y - 1);
              switch (Map_1[Level - 1][y2][x]) {
              case ' ':
                {
                  Map_1[Level - 1][y][x] = ' ';
                  y -= 1;
                  Map_1[Level - 1][y2][x] = 'P';
                }
                break;
              case '!':
                {
                  Level += 1;
                  if (Level == 11) {
                    Level = 1;::page = "minigame";
                  }
                }
                break;
              case '*':
                {
                  Hp -= 20;
                  Map_1[Level - 1][y][x] = ' ';
                  y -= 1;
                  Map_1[Level - 1][y2][x] = 'P';
                }
                break;
              case 'H':
                {
                  Hp += 20;
                  if (Hp > 100) {
                    Hp = 100;
                  }
                  Map_1[Level - 1][y][x] = ' ';
                  x += 1;
                  Map_1[Level - 1][y][x] = 'P';
                }
              }
            }
            if (GetAsyncKeyState(VK_DOWN) != 0) //Down
            {
              int y2 = (y + 1);
              switch (Map_1[Level - 1][y2][x]) {
              case ' ':
                {
                  Map_1[Level - 1][y][x] = ' ';
                  y += 1;
                  Map_1[Level - 1][y2][x] = 'P';
                }
                break;
              case '!':
                {
                  Level += 1;
                  if (Level == 11) {
                    Level = 1;::page = "minigame";
                  }
                }
                break;
              case '*':
                {
                  Hp -= 20;
                  Map_1[Level - 1][y][x] = ' ';
                  y += 1;
                  Map_1[Level - 1][y2][x] = 'P';
                }
                break;
              case 'H':
                {
                  Hp += 20;
                  if (Hp > 100) {
                    Hp = 100;
                  }
                  Map_1[Level - 1][y][x] = ' ';
                  x += 1;
                  Map_1[Level - 1][y][x] = 'P';
                }
              }
            }
            if (GetAsyncKeyState(VK_LEFT) != 0) //Left
            {
              int x2 = (x - 1);
              switch (Map_1[Level - 1][y][x2]) {
              case ' ':
                {
                  Map_1[Level - 1][y][x] = ' ';
                  x -= 1;
                  Map_1[Level - 1][y][x2] = 'P';
                }
                break;
              case '!':
                {
                  Level += 1;
                  if (Level == 11) {
                    Level = 1;::page = "minigame";
                  }
                }
                break;
              case '*':
                {
                  Hp -= 20;
                  Map_1[Level - 1][y][x] = ' ';
                  x -= 1;
                  Map_1[Level - 1][y][x2] = 'P';
                }
                break;
              case 'H':
                {
                  Hp += 20;
                  if (Hp > 100) {
                    Hp = 100;
                  }
                  Map_1[Level - 1][y][x] = ' ';
                  x += 1;
                  Map_1[Level - 1][y][x2] = 'P';
                }
              }
            }
            if (GetAsyncKeyState(VK_RIGHT) != 0) //Right
            {
              int x2 = (x + 1);
              switch (Map_1[Level - 1][y][x2]) {
              case ' ':
                {
                  Map_1[Level - 1][y][x] = ' ';
                  x += 1;
                  Map_1[Level - 1][y][x2] = 'P';
                }
                break;
              case '!':
                {
                  Level += 1;
                  if (Level == 11) {
                    Level = 1;::page = "minigame";
                  }
                }
                break;
              case '*':
                {
                  Hp -= 20;
                  Map_1[Level - 1][y][x] = ' ';
                  x += 1;
                  Map_1[Level - 1][y][x2] = 'P';
                }
                break;
              case 'H':
                {
                  Hp += 20;
                  if (Hp > 100) {
                    Hp = 100;
                  }
                  Map_1[Level - 1][y][x] = ' ';
                  x += 1;
                  Map_1[Level - 1][y][x2] = 'P';
                }
                break;
              }
            }

          }
          break;

        } //end switch
      } //end for x
    } //end for y
    //enemy move
    vector < int > col_x;
    vector < int > col_y;
    for (int y = 0; y < 36; y++) {
      for (int x = 0; x < Map_1[Level - 1][y].size(); x++) {
        if (Map_1[Level - 1][y][x] == '*') {
          int check = 0;
          for (int i = 0; i < col_x.size(); i++) {
            if (y == col_y[i] && x == col_x[i]) {
              check = 1;
            }
          }
          if (check == 0) {
            int rand_pos = rand() % 4;

            if (rand_pos == 0) { //left
              if (Map_1[Level - 1][y][x - 1] == ' ') {
                Map_1[Level - 1][y][x] = ' ';
                Map_1[Level - 1][y][x - 1] = '*';
                col_x.push_back(x - 1);
                col_y.push_back(y);
              } else if (Map_1[Level - 1][y][x - 1] == 'P') {
                Hp -= 20;
                Map_1[Level - 1][y][x] = ' ';
              }

            } else if (rand_pos == 1) { //right

              if (Map_1[Level - 1][y][x + 1] == ' ') {
                Map_1[Level - 1][y][x] = ' ';
                Map_1[Level - 1][y][x + 1] = '*';
                col_x.push_back(x + 1);
                col_y.push_back(y);
              } else if (Map_1[Level - 1][y][x + 1] == 'P') {
                Map_1[Level - 1][y][x] = ' ';
              }

            } else if (rand_pos == 2) { //up

              if (Map_1[Level - 1][y - 1][x] == ' ') {
                Map_1[Level - 1][y][x] = ' ';
                Map_1[Level - 1][y - 1][x] = '*';
                col_x.push_back(x);
                col_y.push_back(y - 1);
              } else if (Map_1[Level - 1][y - 1][x] == 'P') {
                Hp -= 20;
                Map_1[Level - 1][y][x] = ' ';
              }

            } else if (rand_pos == 3) { //down

              if (Map_1[Level - 1][y + 1][x] == ' ') {
                Map_1[Level - 1][y][x] = ' ';
                Map_1[Level - 1][y + 1][x] = '*';
                col_x.push_back(x);
                col_y.push_back(y + 1);
              } else if (Map_1[Level - 1][y + 1][x] == 'P') {
                Hp -= 20;
                Map_1[Level - 1][y][x] = ' ';
              }

            }
          }

        }
      }
    }
    if (Hp <= 0) {
      reset_map();
      Hp = 100;
    }

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 12);

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0);

    if (GetAsyncKeyState(VK_SPACE) != 0) {
      system("cls");::page = "minigame";
      break;
    }

  } //end map

}

void reset_tic(int map[][3]) //reset map
{
  for (int i = 0; i < 3; i++) {
    map[i][0] = 0;
    map[i][1] = 0;
    map[i][2] = 0;
  }
}

int check_tic_win(int map[][3]) {
  int win = 0;

  if ((map[0][0] == map[1][1] && map[0][0] == map[2][2] && map[0][0] != 0) || (map[0][2] == map[1][1] && map[0][2] == map[2][0] && map[0][2] != 0)) //cross
  {
    win = 1;
  }
  if ((map[0][0] == map[0][1] && map[0][0] == map[0][2] && map[0][0] != 0) || (map[1][0] == map[1][1] && map[1][0] == map[1][2] && map[1][0] != 0) || (map[2][0] == map[2][1] && map[2][0] == map[2][2] && map[2][0] != 0)) { //hori
    win = 1;
  }
  if ((map[0][0] == map[1][0] && map[0][0] == map[2][0] && map[0][0] != 0) || (map[0][1] == map[1][1] && map[0][1] == map[2][1] && map[0][1] != 0) || (map[0][2] == map[1][2] && map[0][2] == map[2][2] && map[0][2] != 0)) //verti
  {
    win = 1;
  }

  return win;
}

void print_tic_map(int map[][3], int curX, int curY) {
  SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
  char c = 219;
  cout << endl;
  print_text("TICTACTOE", "\t\t");
  cout << endl;
  for (int j = 0; j < 3; j++) {
    printf("\t\t\t%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\n", c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c);
    for (int k = 0; k < 4; k++) {

      cout << "\t\t\t";
      for (int i = 0; i < 3; i++) {
        if (map[j][i] == 1 && k == 0) {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
          cout << c;
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 13);
          cout << "__  __";
        } else if (map[j][i] == 2 && k == 1) {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
          cout << c;
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 11);
          cout << " /  \\ ";
        } else if (map[j][i] == 2 && k == 2) {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
          cout << c;
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 11);
          cout << "| () |";
        } else if (map[j][i] == 1 && k == 1) {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
          cout << c;
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 13);
          cout << "\\ \\/ /";
        } else if (map[j][i] == 1 && k == 2) {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
          cout << c;
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 13);
          cout << " >  < ";
        } else if (map[j][i] == 2 && k == 0) {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
          cout << c;
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 11);
          cout << "  __  ";
        } else if (map[j][i] == 2 && k == 3) {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
          cout << c;
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 11);
          cout << " \\__/ ";
        } else if (map[j][i] == 1 && k == 3) {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
          cout << c;
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 13);
          cout << "/_/\\_\\";
        } else if (i == curX && j == curY && k == 0) {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
          cout << c;
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);
          cout << " _||_ ";
        } else if (i == curX & j == curY && k == 1) {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
          cout << c;
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);
          cout << "|_||_|";
        } else if (i == curX && j == curY && k == 2) {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
          cout << c;
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);
          cout << "|_||_|";
        } else if (i == curX && j == curY && k == 3) {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
          cout << c;
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);
          cout << "  ||  ";
        } else {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
          cout << c << "      ";
        }

      }
      SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
      cout << c << endl;
    }

  }
  printf("\t\t\t%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\n", c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c);

}

void tictactoe() {
  int map[3][3];
  int cur_x = 0, cur_y = 0;
  int player = 1;
  int round = 0;
  bool check = false;
  reset_tic(map);

  while (true) {

    system("cls");
    print_tic_map(map, cur_x, cur_y);

    if (check) {

      cout << "This space has been taken.";
      check = false;
    }
    if (check_tic_win(map)) {
      if (player == 1) {
        player = 2;
      } else if (player == 2) {
        player = 1;
      }
      SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);
      cout << "The winner is player " << player << endl << "Press Arrow to continue\n";
      reset_tic(map);
      player = 1;
      round = 0;
    } else {
      if (round < 9) {

        if (player == 1) {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 13);
        } else {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 11);
        }
        cout << endl << "Player " << player << "'s turn.\nPress Arrow To Move.\nPress Enter To Place.\n";
      } else {
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);
        cout << "Draw\n";
        reset_tic(map);
        player = 1;
        round = 0;
      }
    }

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 5);
    printf("\n\n\n\n\n\n\t.__ .__ .___ __. __.   __..__ .__. __ .___.__ .__..__   .___..__.  .__ .__. __ .  .\n");
    printf("\t[__)[__)[__ (__ (__   (__ [__)[__]/  `[__ [__)[__][__)    |  |  |  [__)[__]/  `|_/ \n");
    printf("\t|   |  \\[___.__).__)  .__)|   |  |\\__.[___[__)|  ||  \\    |  |__|  [__)|  |\\__.|  \\\n");

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0);
    system("pause");

    if (GetAsyncKeyState(VK_LEFT) != 0) //left
    {
      if (cur_x > 0) {
        cur_x--;
      }
    } else if (GetAsyncKeyState(VK_RIGHT) != 0) //right
    {
      if (cur_x < 2) {
        cur_x++;
      }
    } else if (GetAsyncKeyState(VK_UP) != 0) //up
    {
      if (cur_y > 0) {
        cur_y--;
      }
    } else if (GetAsyncKeyState(VK_DOWN) != 0) //down
    {
      if (cur_y < 2) {
        cur_y++;
      }
    } else if (GetAsyncKeyState(VK_RETURN) != 0) //press
    {
      if (map[cur_y][cur_x] == 0) {
        map[cur_y][cur_x] = player;
        if (player == 1) {
          player = 2;

        } else if (player == 2) {
          player = 1;
        }
        round++;
      } else {
        check = true;
      }

    } else if (GetAsyncKeyState(VK_SPACE) != 0) //exit
    {
      ::page = "minigame";
      break;
    }

  }

}

void show_four_connect(int cur, int table[][7]) {

  char c = 219;
  SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
  cout << endl;
  print_text("Connect Four", "\t");
  cout << endl;
  for (int j = 0; j < 6; j++) {
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
    printf("\t\t\t%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\n", c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c);
    for (int k = 0; k < 4; k++) {

      cout << "\t\t\t";
      for (int i = 0; i < 7; i++) {
        if (table[j][i] == 1 && k == 0) {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
          cout << c;
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 13);
          cout << "__  __";
        } else if (table[j][i] == 2 && k == 1) {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
          cout << c;
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 11);
          cout << " /  \\ ";
        } else if (table[j][i] == 2 && k == 2) {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
          cout << c;
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 11);
          cout << "| () |";
        } else if (table[j][i] == 1 && k == 1) {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
          cout << c;
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 13);
          cout << "\\ \\/ /";
        } else if (table[j][i] == 1 && k == 2) {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
          cout << c;
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 13);
          cout << " >  < ";
        } else if (table[j][i] == 2 && k == 0) {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
          cout << c;
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 11);
          cout << "  __  ";
        } else if (table[j][i] == 2 && k == 3) {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
          cout << c;
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 11);
          cout << " \\__/ ";
        } else if (table[j][i] == 1 && k == 3) {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
          cout << c;
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 13);
          cout << "/_/\\_\\";
        } else {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);

          cout << c << "      ";
        }

      }
      SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
      cout << c << endl;
    }

  }
  SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
  printf("\t\t\t%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\n", c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c);
  for (int j = 0; j < 4; j++) {
    cout << "\t\t\t";
    for (int i = 0; i < 7; i++) {

      if (cur == i) {
        if (j == 1) {
          cout << c << "  /\\  ";
        } else if (j == 2) {
          cout << c << " |/\\| ";
        } else {
          cout << c << "      ";
        }
      } else {

        cout << c << "      ";

      }

    }

    cout << c << endl;
  }

  printf("\t\t\t%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\n", c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c);

}

void player_play(int p, int col, bool & check, int table[][7], int & y) {

  for (int i = 5; i >= 0; i--) {
    if (table[0][col] > 0) {
      check = true;
      break;
    }
    if (table[i][col] == 0) {
      table[i][col] = p;
      cout << table[i][col];
      y = i;
      break;
    }

  }

}

int check_win_new(int x, int y, int table[][7], int p) {
  int win = 0;
  int check_left = 0, check_right = 0, check_left_up = 0, check_right_up = 0, check_left_down = 0, check_right_down = 0, check_up = 0, check_down = 0;
  int point = 1;
  int y_count = 1;
  for (int i = x - 1; i >= 0; i--) { //Check Left
    if (table[y][i] == p) {
      check_left += 1;
    } else {
      break;
    }
  }
  for (int i = x + 1; i < 7; i++) { //check right
    if (table[y][i] == p) {
      check_right += 1;
    } else {
      break;
    }

  }
  for (int i = x + 1; i < 7 && y - y_count >= 0; i++) { //right up
    if (table[y - y_count][i] == p) {
      check_right_up += 1;
      y_count++;
    } else {
      break;
    }

  }
  for (int i = x - 1; i >= 0 && y - y_count >= 0; i--) { //left up
    if (table[y - y_count][i] == p) {
      check_left_up += 1;
      y_count++;
    } else {
      break;
    }

  }

  for (int i = x - 1; i >= 0 && y + y_count < 6; i--) { //left down
    if (table[y + y_count][i] == p) {
      check_left_down += 1;
      y_count++;
    } else {
      break;
    }

  }

  for (int i = x + 1; i < 7 && y + y_count < 6; i++) { //right down
    if (table[y + y_count][i] == p) {
      check_right_down += 1;
      y_count++;
    } else {
      break;
    }

  }
  for (int i = y + 1; i < 6; i++) { //Check down
    if (table[i][x] == p) {
      check_down += 1;
    } else {
      break;
    }
  }
  for (int i = y - 1; i >= 0; i--) { //Check up
    if (table[i][x] == p) {
      check_down += 1;
    } else {
      break;
    }
  }

  if (point + check_left + check_right >= 4) {
    win = 1;
  }
  if (point + check_left_up + check_right_down >= 4) {
    win = 1;
  }
  if (point + check_left_down + check_right_up >= 4) {
    win = 1;
  }
  if (point + check_down + check_up >= 4) {
    win = 1;
  }

  return win;
}

void four_connect() {
  SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
  int cursor = 0;
  int turn = 1;
  bool check_col = false;
  int win = 0;
  int table[6][7];
  int round = 0;
  for (int i = 0; i < 6; i++) {
    for (int j = 0; j < 7; j++) {
      table[i][j] = 0;
    }
  }

  while (true) {

    //check the winner condition

    system("cls");

    show_four_connect(cursor, table);
    if (win == 1) {

      if (turn == 1) {

        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);
        cout << "\n\n\t\tThe winner is player 2 (o signal)\n\t\tPress Arrow to continue." << endl;
      } else {

        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);
        cout << "\n\n\t\tThe winner is player 1 (x signal)\n\t\tPress Arrow to continue." << endl;
      }

      for (int i = 0; i < 6; i++) {
        for (int j = 0; j < 7; j++) {
          table[i][j] = 0;
        }
      }
      turn = 1;

      cursor = 0;

      SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0);
      round = 0;
    } else if (round == 42) {
      SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);
      cout << "\n\n\t\tDraw\n\t\tPress Arrow to continue." << endl;
      turn = 1;
      win = 0;
      cursor = 0;
      for (int i = 0; i < 6; i++) {
        for (int j = 0; j < 7; j++) {
          table[i][j] = 0;
        }
      }
      SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0);
    }
    if (turn == 1 && win == 0) {
      SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 13);
    } else if (turn == 2 && win == 0) {
      SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 11);
    } else {
      SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0);

    }
    cout << "\tPlayer " << turn << " turn" << endl << "\tPress Enter To Place.\n";

    if (check_col == true) {
      SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 12);
      cout << "\n\tThis Column is Full.\n";
    }
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 5);
    printf("\n\n\n\n\n\n\t.__ .__ .___ __. __.   __..__ .__. __ .___.__ .__..__   .___..__.  .__ .__. __ .  .\n");
    printf("\t[__)[__)[__ (__ (__   (__ [__)[__]/  `[__ [__)[__][__)    |  |  |  [__)[__]/  `|_/ \n");
    printf("\t|   |  \\[___.__).__)  .__)|   |  |\\__.[___[__)|  ||  \\    |  |__|  [__)|  |\\__.|  \\\n");
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0);

    system("pause");

    check_col = false;
    if (win == 1) {
      win = 0;
    } else {
      if (GetAsyncKeyState(VK_RIGHT) != 0) {
        if (cursor < 6) {
          cursor++;
        }
      } else if (GetAsyncKeyState(VK_LEFT) != 0) {
        if (cursor > 0) {
          cursor--;
        }
      } else if (GetAsyncKeyState(VK_RETURN) != 0) {
        int y;
        player_play(turn, cursor, check_col, table, y);
        win = check_win_new(cursor, y, table, turn);
        if (turn == 1 && check_col == false) {
          turn = 2;
          round++;
        } else if (turn == 2 && check_col == false) {
          turn = 1;
          round++;
        }

      }
    }

    if (GetAsyncKeyState(VK_SPACE) != 0) {
      ::page = "minigame";
      break;
    }

  }

}

void print_adven(int w) {
  char a = 219;
  cout << "\t\t\t";
  cout << "       _   _____   _____ _  _ _____ _   _ ___ ___ " << endl;
  cout << "\t\t\t";
  for (int i = 0; i < 2; i++) {
    if (w == 0) {
      cout << a;
    } else {
      cout << " ";
    }
  }
  cout << "  ";
  cout << "  /_\\ |   \\ \\ / / __| \\| |_   _| | | | _ \\ __|" << endl;
  cout << "\t\t\t";
  cout << " ";
  for (int i = 0; i < 2; i++) {
    if (w == 0) {
      cout << a;
    } else {
      cout << " ";
    }
  }
  cout << " ";
  cout << " / _ \\| |) \\ V /| _|| .` | | | | |_| |   / _| " << endl;
  cout << "\t\t\t";
  for (int i = 0; i < 2; i++) {
    if (w == 0) {
      cout << a;
    } else {
      cout << " ";
    }
  }
  cout << "  ";
  cout << "/_/ \\_\\___/ \\_/ |___|_|\\_| |_|  \\___/|_|_\\___|" << endl;
}

void print_4con(int w) {
  char a = 219;
  cout << "\t\t\t";
  cout << "      ___ ___  _  _ _  _ ___ ___ _____ _ _  " << endl;
  cout << "\t\t\t";
  for (int i = 0; i < 2; i++) {
    if (w == 1) {
      cout << a;
    } else {
      cout << " ";
    }
  }
  cout << "  ";
  cout << " / __/ _ \\| \\| | \\| | __/ __|_   _| | | " << endl;
  cout << "\t\t\t";
  cout << " ";
  for (int i = 0; i < 2; i++) {
    if (w == 1) {
      cout << a;
    } else {
      cout << " ";
    }
  }
  cout << " ";
  cout << "| (_| (_) | .` | .` | _| (__  | | |_  _|" << endl;
  cout << "\t\t\t";
  for (int i = 0; i < 2; i++) {
    if (w == 1) {
      cout << a;
    } else {
      cout << " ";
    }
  }
  cout << "  ";
  cout << " \\___\\___/|_|\\_|_|\\_|___\\___| |_|   |_| " << endl;
}

void print_tic(int w) {
  char a = 219;
  cout << "\t\t\t";
  cout << "     _____ ___ ___ _____ _   ___ _____ ___  ___ " << endl;
  cout << "\t\t\t";
  for (int i = 0; i < 2; i++) {
    if (w == 2) {
      cout << a;
    } else {
      cout << " ";
    }
  }
  cout << "  ";
  cout << "|_   _|_ _/ __|_   _/_\\ / __|_   _/ _ \\| __|" << endl;
  cout << "\t\t\t";
  cout << " ";
  for (int i = 0; i < 2; i++) {
    if (w == 2) {
      cout << a;
    } else {
      cout << " ";
    }
  }
  cout << " ";
  cout << "  | |  | | (__  | |/ _ \\ (__  | || (_) | _| " << endl;
  cout << "\t\t\t";
  for (int i = 0; i < 2; i++) {
    if (w == 2) {
      cout << a;
    } else {
      cout << " ";
    }
  }
  cout << "  ";
  cout << "  |_| |___\\___| |_/_/ \\_\\___| |_| \\___/|___|" << endl;
}

void mini_menu() {
  int mini_cur = 0;

  while (true) {
    system("cls");

    if (GetAsyncKeyState(VK_DOWN) != 0) {
      if (mini_cur < 2) {
        mini_cur++;
      }
    } else if (GetAsyncKeyState(VK_UP) != 0) {
      if (mini_cur > 0) {
        mini_cur--;
      }
    } else if (GetAsyncKeyState(VK_RETURN) != 0) {
      if (mini_cur == 0) {
        ::page = "advengame";
        break;
      } else if (mini_cur == 1) {
        ::page = "4congame";
        break;
      } else if (mini_cur == 2) {
        ::page = "tictactoe";
        break;
      }

    } else if (GetAsyncKeyState(VK_SPACE) != 0) {
      ::page = "main";
      break;
    }
    cout << endl << endl;
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 9);
    print_text("MINIGAME", "\t\t\t\t\t");
    cout << endl << endl;
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 11);
    print_adven(mini_cur);
    cout << endl;
    print_4con(mini_cur);
    cout << endl;
    print_tic(mini_cur);

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 5);
    printf("\n\n\n\n\n\n\t.__ .__ .___ __. __.   __..__ .__. __ .___.__ .__..__   .___..__.  .__ .__. __ .  .\n");
    printf("\t[__)[__)[__ (__ (__   (__ [__)[__]/  `[__ [__)[__][__)    |  |  |  [__)[__]/  `|_/ \n");
    printf("\t|   |  \\[___.__).__)  .__)|   |  |\\__.[___[__)|  ||  \\    |  |__|  [__)|  |\\__.|  \\\n");
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0);

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0);
    system("pause");
  }

}

void print_logo() {
  char e = 92;
  /*	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),0);
  	cout<<endl;*/
  SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);
  for (int i = 0; i < 8; i++) {
    cout << "\n";
  }
  for (int i = 0; i < 47; i++) {
    cout << " ";
  }
  printf(" _______  _______  _______      ______   _______  _        _ \n");
  for (int i = 0; i < 47; i++) {
    cout << " ";
  }
  printf("(  ____ %c(  ____ )(  ____ %c    (  ___ %c (  ___  )( (    /|| %c    /%c\n", e, e, e, e, e);
  for (int i = 0; i < 47; i++) {
    cout << " ";
  }
  printf("| (    %c/| (    )|| (    %c/    | (   ) )| (   ) ||  %c  ( ||  %c  / /\n", e, e, e, e);
  for (int i = 0; i < 47; i++) {
    cout << " ";
  }
  printf("| |      | (____)|| (__        | (__/ / | (___) ||   %c | ||  (_/ / \n", e);
  for (int i = 0; i < 47; i++) {
    cout << " ";
  }
  printf("| |      |  _____)|  __)       |  __ (  |  ___  || (%c %c) ||   _ (  \n", e, e);
  for (int i = 0; i < 47; i++) {
    cout << " ";
  }
  printf("| |      | (      | (          | (  %c %c | (   ) || | %c   ||  ( %c %c \n", e, e, e, e, e);
  for (int i = 0; i < 47; i++) {
    cout << " ";
  }
  printf("| (____/%c| )      | (____/%c    | )___) )| )   ( || )  %c  ||  /  %c %c\n", e, e, e, e, e);
  for (int i = 0; i < 47; i++) {
    cout << " ";
  }
  printf("(_______/|/       (_______/    |/ %c___/ |/     %c||/    )_)|_/    %c/\n", e, e, e);

  cout << endl;
  cout << endl;
}

void wrong_pass() {
  cout << "\t\t\t\t\t\t          .  ..__ .__..  ..__   .__ .__. __. __..  ..__..__ .__ " << endl;
  cout << "\t\t\t\t\t\t          |  |[__)|  ||\\ |[ __  [__)[__](__ (__ |  ||  |[__)|  \\" << endl;
  cout << "\t\t\t\t\t\t          |/\\||  \\|__|| \\|[_./  |   |  |.__).__)|/\\||__||  \\|__/" << endl;
}

void otp_page() {
  string otp = create_otp();
  string s = "";
  int wrong = 0;
  while (true) {

    system("cls");
    cout << "\n\n\n\n\n";
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
    //print_text("OTP","\t\t\t\t\t\t\t\t      ");
    cout << "\t\t\t\t\t               ####### ####### ######      #####  ####### ######  ####### " << endl;
    cout << "\t\t\t\t\t               #     #    #    #     #    #     # #     # #     # #       " << endl;
    cout << "\t\t\t\t\t               #     #    #    #     #    #       #     # #     # #       " << endl;
    cout << "\t\t\t\t\t               #     #    #    ######     #       #     # #     # #####   " << endl;
    cout << "\t\t\t\t\t               #     #    #    #          #       #     # #     # #       " << endl;
    cout << "\t\t\t\t\t               #     #    #    #          #     # #     # #     # #       " << endl;
    cout << "\t\t\t\t\t               #######    #    #           #####  ####### ######  ####### " << endl;
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);
    cout << "\n\n\n\n\n\n\n";
    print_text(otp, "\t\t\t\t\t\t\t  ");
    if (s.size() < 6) {
      if (GetAsyncKeyState(0x41) != 0) {
        s = s + "A";
      } else if (GetAsyncKeyState(0x42) != 0) {
        s = s + "B";
      } else if (GetAsyncKeyState(0x43) != 0) {
        s = s + "C";
      } else if (GetAsyncKeyState(0x44) != 0) {
        s = s + "D";
      } else if (GetAsyncKeyState(0x45) != 0) {
        s = s + "E";
      } else if (GetAsyncKeyState(0x46) != 0) {
        s = s + "F";
      } else if (GetAsyncKeyState(0x47) != 0) {
        s = s + "G";
      } else if (GetAsyncKeyState(0x48) != 0) {
        s = s + "H";
      } else if (GetAsyncKeyState(0x49) != 0) {
        s = s + "I";
      } else if (GetAsyncKeyState(0x4A) != 0) {
        s = s + "J";
      } else if (GetAsyncKeyState(0x4B) != 0) {
        s = s + "K";
      } else if (GetAsyncKeyState(0x4C) != 0) {
        s = s + "L";
      } else if (GetAsyncKeyState(0x4D) != 0) {
        s = s + "M";
      } else if (GetAsyncKeyState(0x4E) != 0) {
        s = s + "N";
      } else if (GetAsyncKeyState(0x4F) != 0) {
        s = s + "O";
      } else if (GetAsyncKeyState(0x50) != 0) {
        s = s + "P";
      } else if (GetAsyncKeyState(0x51) != 0) {
        s = s + "Q";
      } else if (GetAsyncKeyState(0x52) != 0) {
        s = s + "R";
      } else if (GetAsyncKeyState(0x53) != 0) {
        s = s + "S";
      } else if (GetAsyncKeyState(0x54) != 0) {
        s = s + "T";
      } else if (GetAsyncKeyState(0x55) != 0) {
        s = s + "U";
      } else if (GetAsyncKeyState(0x56) != 0) {
        s = s + "V";
      } else if (GetAsyncKeyState(0x57) != 0) {
        s = s + "W";
      } else if (GetAsyncKeyState(0x58) != 0) {
        s = s + "X";
      } else if (GetAsyncKeyState(0x59) != 0) {
        s = s + "Y";
      } else if (GetAsyncKeyState(0x5A) != 0) {
        s = s + "Z";
      } else if (GetAsyncKeyState(0x30) != 0 || GetAsyncKeyState(VK_NUMPAD0) != 0) {
        s = s + "0";
      } else
      if (GetAsyncKeyState(0x31) != 0 || GetAsyncKeyState(VK_NUMPAD1) != 0) {
        s = s + "1";
      } else
      if (GetAsyncKeyState(0x32) != 0 || GetAsyncKeyState(VK_NUMPAD2) != 0) {
        s = s + "2";
      } else
      if (GetAsyncKeyState(0x33) != 0 || GetAsyncKeyState(VK_NUMPAD3) != 0) {
        s = s + "3";
      } else
      if (GetAsyncKeyState(0x34) != 0 || GetAsyncKeyState(VK_NUMPAD4) != 0) {
        s = s + "4";
      } else
      if (GetAsyncKeyState(0x35) != 0 || GetAsyncKeyState(VK_NUMPAD5) != 0) {
        s = s + "5";
      } else
      if (GetAsyncKeyState(0x36) != 0 || GetAsyncKeyState(VK_NUMPAD6) != 0) {
        s = s + "6";
      } else
      if (GetAsyncKeyState(0x37) != 0 || GetAsyncKeyState(VK_NUMPAD7) != 0) {
        s = s + "7";
      } else
      if (GetAsyncKeyState(0x38) != 0 || GetAsyncKeyState(VK_NUMPAD8) != 0) {
        s = s + "8";
      } else
      if (GetAsyncKeyState(0x39) != 0 || GetAsyncKeyState(VK_NUMPAD9) != 0) {
        s = s + "9";
      }
    }

    if (GetAsyncKeyState(VK_BACK) != 0) {
      s = s.substr(0, s.size() - 1);
    }
    cout << "\n\n\n\n";
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);

    print_text(s, "\t\t\t\t\t\t\t  ");
    if (wrong == 1) {
      SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 12);
      wrong_pass();
      wrong = 0;
    } else {
      cout << "\n\n\n";
    }

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 13);
    printf("\n\n\n\n\n\n\t.__ .__ .___ __. __.   __..__ .__. __ .___.__ .__..__   .___..__.  .__ .__. __ .  .\n");
    printf("\t[__)[__)[__ (__ (__   (__ [__)[__]/  `[__ [__)[__][__)    |  |  |  [__)[__]/  `|_/ \n");
    printf("\t|   |  \\[___.__).__)  .__)|   |  |\\__.[___[__)|  ||  \\    |  |__|  [__)|  |\\__.|  \\\n"); //cout<<page;
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 12);

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0);
    system("pause");
    if (GetAsyncKeyState(VK_SPACE) != 0) {
      system("cls");::page = "login";
      break;
    }
    if (GetAsyncKeyState(VK_RETURN) != 0) {
      if (s == otp) {
        ::page = "profile";
        break;
      } else {
        wrong = 1;
      }

    }
  }

}
void pin_state() {

  string s = "";

  int wrong = 0;

  while (true) {
    cout << endl << endl << endl << endl;
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
    print_text("ENTER PIN", "\t\t\t\t\t\t\t");

    if (s.size() < 6) {
      if (GetAsyncKeyState(0x30) != 0 || GetAsyncKeyState(VK_NUMPAD0) != 0) {
        s = s + "0";
      } else
      if (GetAsyncKeyState(0x31) != 0 || GetAsyncKeyState(VK_NUMPAD1) != 0) {
        s = s + "1";
      } else
      if (GetAsyncKeyState(0x32) != 0 || GetAsyncKeyState(VK_NUMPAD2) != 0) {
        s = s + "2";
      } else
      if (GetAsyncKeyState(0x33) != 0 || GetAsyncKeyState(VK_NUMPAD3) != 0) {
        s = s + "3";
      } else
      if (GetAsyncKeyState(0x34) != 0 || GetAsyncKeyState(VK_NUMPAD4) != 0) {
        s = s + "4";
      } else
      if (GetAsyncKeyState(0x35) != 0 || GetAsyncKeyState(VK_NUMPAD5) != 0) {
        s = s + "5";
      } else
      if (GetAsyncKeyState(0x36) != 0 || GetAsyncKeyState(VK_NUMPAD6) != 0) {
        s = s + "6";
      } else
      if (GetAsyncKeyState(0x37) != 0 || GetAsyncKeyState(VK_NUMPAD7) != 0) {
        s = s + "7";
      } else
      if (GetAsyncKeyState(0x38) != 0 || GetAsyncKeyState(VK_NUMPAD8) != 0) {
        s = s + "8";
      } else
      if (GetAsyncKeyState(0x39) != 0 || GetAsyncKeyState(VK_NUMPAD9) != 0) {
        s = s + "9";
      }
    }
    if (GetAsyncKeyState(VK_BACK) != 0) {
      s = s.substr(0, s.size() - 1);
    }
    cout << "\n\n\n\n\n\n";
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);

    print_text(s, "\t\t\t\t\t\t\t  ");
    if (wrong == 1) {
      SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 12);
      wrong_pass();
      wrong = 0;
    } else {
      cout << "\n\n\n";
    }
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 13);

    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t.__ .__ .___ __. __.   __..__ .__. __ .___.__ .__..__   .___..__.  .__ .__ .__..___._..   .___\n");
    printf("\t[__)[__)[__ (__ (__   (__ [__)[__]/  `[__ [__)[__][__)    |  |  |  [__)[__)|  |[__  | |   [__ \n");
    printf("\t|   |  \\[___.__).__)  .__)|   |  |\\__.[___[__)|  ||  \\    |  |__|  |   |  \\|__||   _|_|___[___\n");

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0);
    system("pause");
    if (GetAsyncKeyState(VK_SPACE) != 0) {
      system("cls");::page = "profile";
      break;
    }
    if (GetAsyncKeyState(VK_RETURN) != 0) {
      if (s == all_customers[::num].pin) {
        if (::state == 0) {
          all_customers[::num].money += pin_mon;
          history(all_customers[::num].id, "+" + to_string(pin_mon) + "   From Deposit [Money]---> " + to_string(all_customers[::num].money));
        } else if (::state == 1) {
          all_customers[::num].money -= pin_mon;
          history(all_customers[::num].id, "-" + to_string(pin_mon) + "   From Withdraw [Money]---> " + to_string(all_customers[::num].money));
        } else if (::state == 2) {
          all_customers[::num_transfer].money += pin_mon;
          all_customers[::num].money -= pin_mon;
          history(all_customers[::num].id, "-" + to_string(pin_mon) + "   From Transfer to " + all_customers[::num_transfer].id + " [Money]---> " + to_string(all_customers[::num].money));
          history(all_customers[::num_transfer].id, "+" + to_string(pin_mon) + "   From Transfer from " + all_customers[::num].id + " [Money]---> " + to_string(all_customers[::num_transfer].money));
        }::page = "profile";
        if (::state == 4) {
          all_customers.erase(all_customers.begin() + ::num);
          del_id = find_id.find(all_customers[::num].id);
          find_id.erase(del_id);::page = "main";
          update_data();
        }
        break;
      } else {
        wrong = 1;
      }

    }
    system("cls");
  }

  update_data();

}
void deposit() {
  string s = "";
  while (true) {

    system("cls");
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
    cout << "\n\n";
    cout << "\t\t\t\t\t\t\t########  ######## ########   #######   ######  #### ######## " << endl;
    cout << "\t\t\t\t\t\t\t##     ## ##       ##     ## ##     ## ##    ##  ##     ##    " << endl;
    cout << "\t\t\t\t\t\t\t##     ## ##       ##     ## ##     ## ##        ##     ##    " << endl;
    cout << "\t\t\t\t\t\t\t##     ## ######   ########  ##     ##  ######   ##     ##    " << endl;
    cout << "\t\t\t\t\t\t\t##     ## ##       ##        ##     ##       ##  ##     ##    " << endl;
    cout << "\t\t\t\t\t\t\t##     ## ##       ##        ##     ## ##    ##  ##     ##    " << endl;
    cout << "\t\t\t\t\t\t\t########  ######## ##         #######   ######  ####    ##    " << endl << endl << endl;
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);
    print_text("ENTER MONEY AMOUNT", "\t");
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);
    if (s.size() < 7) {
      if (GetAsyncKeyState(0x30) != 0 || GetAsyncKeyState(VK_NUMPAD0) != 0) {
        s = s + "0";
      } else
      if (GetAsyncKeyState(0x31) != 0 || GetAsyncKeyState(VK_NUMPAD1) != 0) {
        s = s + "1";
      } else
      if (GetAsyncKeyState(0x32) != 0 || GetAsyncKeyState(VK_NUMPAD2) != 0) {
        s = s + "2";
      } else
      if (GetAsyncKeyState(0x33) != 0 || GetAsyncKeyState(VK_NUMPAD3) != 0) {
        s = s + "3";
      } else
      if (GetAsyncKeyState(0x34) != 0 || GetAsyncKeyState(VK_NUMPAD4) != 0) {
        s = s + "4";
      } else
      if (GetAsyncKeyState(0x35) != 0 || GetAsyncKeyState(VK_NUMPAD5) != 0) {
        s = s + "5";
      } else
      if (GetAsyncKeyState(0x36) != 0 || GetAsyncKeyState(VK_NUMPAD6) != 0) {
        s = s + "6";
      } else
      if (GetAsyncKeyState(0x37) != 0 || GetAsyncKeyState(VK_NUMPAD7) != 0) {
        s = s + "7";
      } else
      if (GetAsyncKeyState(0x38) != 0 || GetAsyncKeyState(VK_NUMPAD8) != 0) {
        s = s + "8";
      } else
      if (GetAsyncKeyState(0x39) != 0 || GetAsyncKeyState(VK_NUMPAD9) != 0) {
        s = s + "9";
      } else if (GetAsyncKeyState(0x6E)) {

        s = s + ".";
      }
    }
    if (GetAsyncKeyState(VK_BACK) != 0) {
      s = s.substr(0, s.size() - 1);
    }
    cout << "\n\n\n\n";

    print_money(s, "\t\t\t\t\t\t\t\t");

    if (GetAsyncKeyState(VK_RETURN) != 0) { //Enter State
      pin_mon = strtold(s.c_str(), NULL);
      /*if(pin_mon>all_customers[num].money){
      	
      }else{
      	cout<<".  ..__..___.  .___.  ..__..  ..__ .  .  .  ..__..  ..___.   ,"<<endl;
      	cout<<"|\\ ||  |  |    [__ |\\ ||  ||  |[ __|__|  |\\/||  ||\\ |[__  \\./ "<<endl;
      	cout<<"| \\||__|  |    [___| \\||__||__|[_./|  |  |  ||__|| \\|[___  |  "<<endl;
      	
      	
      	break;
      }*/
      ::page = "pin";::state = 0;
      break;
    }

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 13);
    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t.__ .__ .___ __. __.   __..__ .__. __ .___.__ .__..__   .___..__.  .__ .__ .__..___._..   .___\n");
    printf("\t[__)[__)[__ (__ (__   (__ [__)[__]/  `[__ [__)[__][__)    |  |  |  [__)[__)|  |[__  | |   [__ \n");
    printf("\t|   |  \\[___.__).__)  .__)|   |  |\\__.[___[__)|  ||  \\    |  |__|  |   |  \\|__||   _|_|___[___\n");

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0);
    system("pause");
    if (GetAsyncKeyState(VK_SPACE) != 0) {
      system("cls");::page = "profile";
      break;
    }

  }
}
void withdraw() {
  string s = "";
  while (true) {
    system("cls");
    cout << "\n\n";
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);

    cout << "\t\t\t\t\t\t\t##      ## #### ######## ##     ## ########  ########     ###    ##      ## " << endl;
    cout << "\t\t\t\t\t\t\t##  ##  ##  ##     ##    ##     ## ##     ## ##     ##   ## ##   ##  ##  ## " << endl;
    cout << "\t\t\t\t\t\t\t##  ##  ##  ##     ##    ##     ## ##     ## ##     ##  ##   ##  ##  ##  ## " << endl;
    cout << "\t\t\t\t\t\t\t##  ##  ##  ##     ##    ######### ##     ## ########  ##     ## ##  ##  ## " << endl;
    cout << "\t\t\t\t\t\t\t##  ##  ##  ##     ##    ##     ## ##     ## ##   ##   ######### ##  ##  ## " << endl;
    cout << "\t\t\t\t\t\t\t##  ##  ##  ##     ##    ##     ## ##     ## ##    ##  ##     ## ##  ##  ## " << endl;
    cout << "\t\t\t\t\t\t\t ###  ###  ####    ##    ##     ## ########  ##     ## ##     ##  ###  ###  " << endl << endl << endl;
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);
    print_text("ENTER MONEY AMOUNT", "\t");
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);
    if (s.size() < 7) {
      if (GetAsyncKeyState(0x30) != 0 || GetAsyncKeyState(VK_NUMPAD0) != 0) {
        s = s + "0";
      } else
      if (GetAsyncKeyState(0x31) != 0 || GetAsyncKeyState(VK_NUMPAD1) != 0) {
        s = s + "1";
      } else
      if (GetAsyncKeyState(0x32) != 0 || GetAsyncKeyState(VK_NUMPAD2) != 0) {
        s = s + "2";
      } else
      if (GetAsyncKeyState(0x33) != 0 || GetAsyncKeyState(VK_NUMPAD3) != 0) {
        s = s + "3";
      } else
      if (GetAsyncKeyState(0x34) != 0 || GetAsyncKeyState(VK_NUMPAD4) != 0) {
        s = s + "4";
      } else
      if (GetAsyncKeyState(0x35) != 0 || GetAsyncKeyState(VK_NUMPAD5) != 0) {
        s = s + "5";
      } else
      if (GetAsyncKeyState(0x36) != 0 || GetAsyncKeyState(VK_NUMPAD6) != 0) {
        s = s + "6";
      } else
      if (GetAsyncKeyState(0x37) != 0 || GetAsyncKeyState(VK_NUMPAD7) != 0) {
        s = s + "7";
      } else
      if (GetAsyncKeyState(0x38) != 0 || GetAsyncKeyState(VK_NUMPAD8) != 0) {
        s = s + "8";
      } else
      if (GetAsyncKeyState(0x39) != 0 || GetAsyncKeyState(VK_NUMPAD9) != 0) {
        s = s + "9";
      }
    }
    if (GetAsyncKeyState(VK_BACK) != 0) {
      s = s.substr(0, s.size() - 1);
    }
    cout << "\n\n\n\n";

    print_money(s, "\t\t\t\t\t\t\t\t");
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 12);
    if (GetAsyncKeyState(VK_RETURN) != 0) { //Enter State
      pin_mon = strtold(s.c_str(), NULL);
      if (pin_mon < all_customers[::num].money) {
        ::page = "pin";::state = 1;
        break;
      } else {
        cout << "\t\t\t\t\t\t\t.  ..__..___.  .___.  ..__..  ..__ .  .  .  ..__..  ..___.   ," << endl;
        cout << "\t\t\t\t\t\t\t|\\ ||  |  |    [__ |\\ ||  ||  |[ __|__|  |\\/||  ||\\ |[__  \\./ " << endl;
        cout << "\t\t\t\t\t\t\t| \\||__|  |    [___| \\||__||__|[_./|  |  |  ||__|| \\|[___  |  " << endl;

      }

    } else {
      cout << "\n\n\n";
    }

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 13);
    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t.__ .__ .___ __. __.   __..__ .__. __ .___.__ .__..__   .___..__.  .__ .__ .__..___._..   .___\n");
    printf("\t[__)[__)[__ (__ (__   (__ [__)[__]/  `[__ [__)[__][__)    |  |  |  [__)[__)|  |[__  | |   [__ \n");
    printf("\t|   |  \\[___.__).__)  .__)|   |  |\\__.[___[__)|  ||  \\    |  |__|  |   |  \\|__||   _|_|___[___\n");

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0);
    system("pause");
    if (GetAsyncKeyState(VK_SPACE) != 0) {
      system("cls");::page = "profile";
      break;
    }
  }
}
void transfer() {

  string s = "", acc_no = "";
  while (true) {
    system("cls");
    cout << "\n\n";
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
    cout << "\t\t\t\t\t\t\t######## ########     ###    ##    ##  ######  ######## ######## ########  " << endl;
    cout << "\t\t\t\t\t\t\t   ##    ##     ##   ## ##   ###   ## ##    ## ##       ##       ##     ## " << endl;
    cout << "\t\t\t\t\t\t\t   ##    ##     ##  ##   ##  ####  ## ##       ##       ##       ##     ## " << endl;
    cout << "\t\t\t\t\t\t\t   ##    ########  ##     ## ## ## ##  ######  ######   ######   ########  " << endl;
    cout << "\t\t\t\t\t\t\t   ##    ##   ##   ######### ##  ####       ## ##       ##       ##   ##   " << endl;
    cout << "\t\t\t\t\t\t\t   ##    ##    ##  ##     ## ##   ### ##    ## ##       ##       ##    ##  " << endl;
    cout << "\t\t\t\t\t\t\t   ##    ##     ## ##     ## ##    ##  ######  ##       ######## ##     ## " << endl << endl << endl;
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);
    print_text("ENTER PAYEE ACC. NO.", "\t");
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);
    if (acc_no.size() < 9) {
      if (GetAsyncKeyState(0x30) != 0 || GetAsyncKeyState(VK_NUMPAD0) != 0) {
        acc_no = acc_no + "0";
      } else
      if (GetAsyncKeyState(0x31) != 0 || GetAsyncKeyState(VK_NUMPAD1) != 0) {
        acc_no = acc_no + "1";
      } else
      if (GetAsyncKeyState(0x32) != 0 || GetAsyncKeyState(VK_NUMPAD2) != 0) {
        acc_no = acc_no + "2";
      } else
      if (GetAsyncKeyState(0x33) != 0 || GetAsyncKeyState(VK_NUMPAD3) != 0) {
        acc_no = acc_no + "3";
      } else
      if (GetAsyncKeyState(0x34) != 0 || GetAsyncKeyState(VK_NUMPAD4) != 0) {
        acc_no = acc_no + "4";
      } else
      if (GetAsyncKeyState(0x35) != 0 || GetAsyncKeyState(VK_NUMPAD5) != 0) {
        acc_no = acc_no + "5";
      } else
      if (GetAsyncKeyState(0x36) != 0 || GetAsyncKeyState(VK_NUMPAD6) != 0) {
        acc_no = acc_no + "6";
      } else
      if (GetAsyncKeyState(0x37) != 0 || GetAsyncKeyState(VK_NUMPAD7) != 0) {
        acc_no = acc_no + "7";
      } else
      if (GetAsyncKeyState(0x38) != 0 || GetAsyncKeyState(VK_NUMPAD8) != 0) {
        acc_no = acc_no + "8";
      } else
      if (GetAsyncKeyState(0x39) != 0 || GetAsyncKeyState(VK_NUMPAD9) != 0) {
        acc_no = acc_no + "9";
      }
    }
    if (GetAsyncKeyState(VK_BACK) != 0 && acc_no.size() > 0) {
      acc_no = acc_no.substr(0, acc_no.size() - 1);
    }
    cout << endl;
    print_text(acc_no, "\t\t\t\t\t\t  ");

    if (GetAsyncKeyState(VK_RETURN) != 0) {
      find_id_all(acc_no, "pin");
      if (::page == "pin") {
        for (int i = 0; i < all_customers.size(); i++) {
          if (acc_no == all_customers[i].id) {
            ::num_transfer = i;
          }
        }
        if (all_customers[::num_transfer].id == all_customers[::num].id) {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 12);::page = "transfer";
          printf("\n\n\t\t\t\t\t     __ .__..  ..  ..__..___.  .___.__..  ..  ..__   .__. __  __ .__..  ..  ..___.  .  .      \n");
          printf("\t\t\t\t\t    /  `[__]|\\ ||\\ ||  |  |    [__ |  ||  ||\\ ||  \\  [__]/  `/  `|  ||  ||\\ |  |    |\\ | _    \n");
          printf("\t\t\t\t\t    \\__.|  || \\|| \\||__|  |    |   |__||__|| \\||__/  |  |\\__.\\__.|__||__|| \\|  |    | \\|(_) * \n");
        } else {
          break;
        }

      }
    } else {
      cout << "\n\n\n";
    }

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 13);
    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t.__ .__ .___ __. __.   __..__ .__. __ .___.__ .__..__   .___..__.  .__ .__ .__..___._..   .___\n");
    printf("\t[__)[__)[__ (__ (__   (__ [__)[__]/  `[__ [__)[__][__)    |  |  |  [__)[__)|  |[__  | |   [__ \n");
    printf("\t|   |  \\[___.__).__)  .__)|   |  |\\__.[___[__)|  ||  \\    |  |__|  |   |  \\|__||   _|_|___[___\n");

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0);
    system("pause");
    if (GetAsyncKeyState(VK_SPACE) != 0) {
      system("cls");::page = "profile";
      break;
    }
  }
  while (::page == "pin") {
    system("cls");
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
    cout << "\n\n";
    cout << "\t\t\t\t\t\t\t######## ########     ###    ##    ##  ######  ######## ######## ########  " << endl;
    cout << "\t\t\t\t\t\t\t   ##    ##     ##   ## ##   ###   ## ##    ## ##       ##       ##     ## " << endl;
    cout << "\t\t\t\t\t\t\t   ##    ##     ##  ##   ##  ####  ## ##       ##       ##       ##     ## " << endl;
    cout << "\t\t\t\t\t\t\t   ##    ########  ##     ## ## ## ##  ######  ######   ######   ########  " << endl;
    cout << "\t\t\t\t\t\t\t   ##    ##   ##   ######### ##  ####       ## ##       ##       ##   ##   " << endl;
    cout << "\t\t\t\t\t\t\t   ##    ##    ##  ##     ## ##   ### ##    ## ##       ##       ##    ##  " << endl;
    cout << "\t\t\t\t\t\t\t   ##    ##     ## ##     ## ##    ##  ######  ##       ######## ##     ## " << endl << endl << endl;
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);
    print_text("ENTER MONEY AMOUNT", "\t");
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);
    if (s.size() < 7) {
      if (GetAsyncKeyState(0x30) != 0 || GetAsyncKeyState(VK_NUMPAD0) != 0) {
        s = s + "0";
      } else
      if (GetAsyncKeyState(0x31) != 0 || GetAsyncKeyState(VK_NUMPAD1) != 0) {
        s = s + "1";
      } else
      if (GetAsyncKeyState(0x32) != 0 || GetAsyncKeyState(VK_NUMPAD2) != 0) {
        s = s + "2";
      } else
      if (GetAsyncKeyState(0x33) != 0 || GetAsyncKeyState(VK_NUMPAD3) != 0) {
        s = s + "3";
      } else
      if (GetAsyncKeyState(0x34) != 0 || GetAsyncKeyState(VK_NUMPAD4) != 0) {
        s = s + "4";
      } else
      if (GetAsyncKeyState(0x35) != 0 || GetAsyncKeyState(VK_NUMPAD5) != 0) {
        s = s + "5";
      } else
      if (GetAsyncKeyState(0x36) != 0 || GetAsyncKeyState(VK_NUMPAD6) != 0) {
        s = s + "6";
      } else
      if (GetAsyncKeyState(0x37) != 0 || GetAsyncKeyState(VK_NUMPAD7) != 0) {
        s = s + "7";
      } else
      if (GetAsyncKeyState(0x38) != 0 || GetAsyncKeyState(VK_NUMPAD8) != 0) {
        s = s + "8";
      } else
      if (GetAsyncKeyState(0x39) != 0 || GetAsyncKeyState(VK_NUMPAD9) != 0) {
        s = s + "9";
      }
    }
    if (GetAsyncKeyState(VK_BACK) != 0) {
      s = s.substr(0, s.size() - 1);
    }
    cout << "\n\n\n\n";

    print_money(s, "\t\t\t\t\t\t\t\t");

    if (GetAsyncKeyState(VK_RETURN) != 0) { //Enter State
      pin_mon = strtold(s.c_str(), NULL);
      if (pin_mon < all_customers[::num].money) {
        ::page = "pin";::state = 2;
        break;
      } else {
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 12);
        cout << "\t\t\t\t\t\t\t.  ..__..___.  .___.  ..__..  ..__ .  .  .  ..__..  ..___.   ," << endl;
        cout << "\t\t\t\t\t\t\t|\\ ||  |  |    [__ |\\ ||  ||  |[ __|__|  |\\/||  ||\\ |[__  \\./ " << endl;
        cout << "\t\t\t\t\t\t\t| \\||__|  |    [___| \\||__||__|[_./|  |  |  ||__|| \\|[___  |  " << endl;

      }

    } else {
      cout << "\n\n\n";
    }

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 13);
    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t.__ .__ .___ __. __.   __..__ .__. __ .___.__ .__..__   .___..__.  .__ .__ .__..___._..   .___\n");
    printf("\t[__)[__)[__ (__ (__   (__ [__)[__]/  `[__ [__)[__][__)    |  |  |  [__)[__)|  |[__  | |   [__ \n");
    printf("\t|   |  \\[___.__).__)  .__)|   |  |\\__.[___[__)|  ||  \\    |  |__|  |   |  \\|__||   _|_|___[___\n");

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0);
    system("pause");
    if (GetAsyncKeyState(VK_SPACE) != 0) {
      system("cls");::page = "transfer";
      break;
    }
  }
}

void print_deposit(int w) {
  char a = 219;
  cout << "\t\t\t";
  cout << "     ____  _____ _____ _____ _____ _____ _____ " << endl;
  cout << "\t\t\t";
  for (int i = 0; i < 2; i++) {
    if (w == 0) {
      cout << a;
    } else {
      cout << " ";
    }
  }
  cout << "  ";
  cout << "|    \\|   __|  _  |     |   __|     |_   _|" << endl;
  cout << "\t\t\t";
  cout << " ";
  for (int i = 0; i < 2; i++) {
    if (w == 0) {
      cout << a;
    } else {
      cout << " ";
    }
  }
  cout << " ";
  cout << "|  |  |   __|   __|  |  |__   |-   -| | |  " << endl;
  cout << "\t\t\t";
  for (int i = 0; i < 2; i++) {
    if (w == 0) {
      cout << a;
    } else {
      cout << " ";
    }
  }
  cout << "  ";
  cout << "|____/|_____|__|  |_____|_____|_____| |_|  " << endl;
}
void print_withdraw(int w) {
  char a = 219;
  cout << "\t\t\t";
  cout << "     _ _ _ _____ _____ _____ ____  _____ _____ _ _ _ " << endl;
  cout << "\t\t\t";
  for (int i = 0; i < 2; i++) {
    if (w == 1) {
      cout << a;
    } else {
      cout << " ";
    }
  }
  cout << "  ";
  cout << "| | | |     |_   _|  |  |    \\| __  |  _  | | | |" << endl;
  cout << "\t\t\t";
  cout << " ";
  for (int i = 0; i < 2; i++) {
    if (w == 1) {
      cout << a;
    } else {
      cout << " ";
    }
  }
  cout << " ";
  cout << "| | | |-   -| | | |     |  |  |    -|     | | | |" << endl;
  cout << "\t\t\t";
  for (int i = 0; i < 2; i++) {
    if (w == 1) {
      cout << a;
    } else {
      cout << " ";
    }
  }
  cout << "  ";
  cout << "|_____|_____| |_| |__|__|____/|__|__|__|__|_____|" << endl;
}
void print_transfer(int w) {
  char a = 219;
  cout << "\t\t\t";
  cout << "     _____ _____ _____ _____ _____ _____ _____ _____ " << endl;
  cout << "\t\t\t";
  for (int i = 0; i < 2; i++) {
    if (w == 2) {
      cout << a;
    } else {
      cout << " ";
    }
  }
  cout << "  ";
  cout << "|_   _| __  |  _  |   | |   __|   __|   __| __  |" << endl;
  cout << "\t\t\t";
  cout << " ";
  for (int i = 0; i < 2; i++) {
    if (w == 2) {
      cout << a;
    } else {
      cout << " ";
    }
  }
  cout << " ";
  cout << "  | | |    -|     | | | |__   |   __|   __|    -|" << endl;
  cout << "\t\t\t";
  for (int i = 0; i < 2; i++) {
    if (w == 2) {
      cout << a;
    } else {
      cout << " ";
    }
  }
  cout << "  ";
  cout << "  |_| |__|__|__|__|_|___|_____|__|  |_____|__|__|" << endl;
}
void print_his(int w) {
  char a = 219;
  cout << "\t\t\t";
  cout << "     _  _ ___ ___ _____ ___  _____   __" << endl;
  cout << "\t\t\t";
  for (int i = 0; i < 2; i++) {
    if (w == 3) {
      cout << a;
    } else {
      cout << " ";
    }
  }
  cout << "  ";
  cout << "| || |_ _/ __|_   _/ _ \\| _ \\ \\ / /" << endl;
  cout << "\t\t\t";
  cout << " ";
  for (int i = 0; i < 2; i++) {
    if (w == 3) {
      cout << a;
    } else {
      cout << " ";
    }
  }
  cout << " ";
  cout << "| __ || |\\__ \\ | || (_) |   /\\ V / " << endl;
  cout << "\t\t\t";
  for (int i = 0; i < 2; i++) {
    if (w == 3) {
      cout << a;
    } else {
      cout << " ";
    }
  }
  cout << "  ";
  cout << "|_||_|___|___/ |_| \\___/|_|_\\ |_|  " << endl;
}
void print_del(int w) {
  char a = 219;
  cout << "\t\t\t";
  cout << "     ___  ___ _    ___ _____ ___     _   ___ ___ " << endl;
  cout << "\t\t\t";
  for (int i = 0; i < 2; i++) {
    if (w == 4) {
      cout << a;
    } else {
      cout << " ";
    }
  }
  cout << "  ";
  cout << "|   \\| __| |  | __|_   _| __|   /_\\ / __/ __|  " << endl;
  cout << "\t\t\t";
  cout << " ";
  for (int i = 0; i < 2; i++) {
    if (w == 4) {
      cout << a;
    } else {
      cout << " ";
    }
  }
  cout << " ";
  cout << "| |) | _|| |__| _|  | | | _|   / _ \\ (_| (__ _ " << endl;
  cout << "\t\t\t";
  for (int i = 0; i < 2; i++) {
    if (w == 4) {
      cout << a;
    } else {
      cout << " ";
    }
  }
  cout << "  ";
  cout << "|___/|___|____|___| |_| |___| /_/ \\_\\___\\___(_)" << endl;
}

void pro_his() {
  string textline;
  ifstream his(all_customers[::num].id + ".txt");
  vector < string > n;
  while (getline(his, textline)) {
    n.push_back(textline);
  }
  his.close();

  while (true) {

    system("cls");
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
    cout << "\n\n\n\t\t\t\t\t\t#     # ###  #####  ####### ####### ######  #     # " << endl;
    cout << "\t\t\t\t\t\t#     #  #  #     #    #    #     # #     #  #   #  " << endl;
    cout << "\t\t\t\t\t\t#     #  #  #          #    #     # #     #   # #   " << endl;
    cout << "\t\t\t\t\t\t#######  #   #####     #    #     # ######     #    " << endl;
    cout << "\t\t\t\t\t\t#     #  #        #    #    #     # #   #      #    " << endl;
    cout << "\t\t\t\t\t\t#     #  #  #     #    #    #     # #    #     #    " << endl;
    cout << "\t\t\t\t\t\t#     # ###  #####     #    ####### #     #    #    " << endl << endl << endl;

    for (int i = 0; i < n.size(); i++) {
      if (n[i][0] == '+') {
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);
      } else {
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 12);
      }
      cout << "\t\t\t" << n[i] << endl;
    }
    if (n.size() == 0) {
      SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 12);
      cout << "\t\t\t" << "You have no history.\n";
    }

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 13);
    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t.__ .__ .___ __. __.   __..__ .__. __ .___.__ .__..__   .___..__.  .__ .__. __ .  .\n");
    printf("\t[__)[__)[__ (__ (__   (__ [__)[__]/  `[__ [__)[__][__)    |  |  |  [__)[__]/  `|_/ \n");
    printf("\t|   |  \\[___.__).__)  .__)|   |  |\\__.[___[__)|  ||  \\    |  |__|  [__)|  |\\__.|  \\\n");

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0);
    system("pause");
    if (GetAsyncKeyState(VK_SPACE) != 0) {
      system("cls");::page = "profile";
      break;
    }
  }

}

void profile() {
  int pro_cur = 0;

  while (true) {
    system("cls");
    cout << "\n\n";
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 13);
    print_text("PROFILE", "\t\t\t\t\t\t    ");
    cout << "\n\n";
    string s = to_string(all_customers[::num].money);

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 9);

    print_text_small("ACC. NO. " + all_customers[::num].id, "\t\t");
    print_text_small("NAME     " + all_customers[::num].name, "\t\t");
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);
    cout << endl;
    print_text_small("AMOUNT OF MONEY", "\t\t\t\t\t\t  ");
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);
    cout << "\n\n";
    print_money(s, "\t\t\t\t\t\t");
    //cout<<all_customers[::num].name;
    if (GetAsyncKeyState(VK_UP) != 0) { //Up State
      if (pro_cur > 0 && pro_cur < 5) {
        pro_cur--;
      }
    } else if (GetAsyncKeyState(VK_DOWN) != 0) { //Down State
      if (pro_cur >= 0 && pro_cur < 4) {
        pro_cur++;
      }
    } else if (GetAsyncKeyState(VK_RETURN) != 0) { //Enter State
      if (pro_cur == 0) {
        ::page = "deposit";
        break;
      } else if (pro_cur == 1) {
        ::page = "withdraw";
        break;
      } else if (pro_cur == 2) {
        ::page = "transfer";
        break;
      } else if (pro_cur == 4) {
        ::page = "pin";
		::state = 4;

        break;
      } else if (pro_cur == 3) {
        ::page = "his";
        break;
      }
    }
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 11);
    cout << "\n\n";
    print_deposit(pro_cur);
    cout << "\n";
    print_withdraw(pro_cur);
    cout << "\n";
    print_transfer(pro_cur);
    cout << "\n";
    print_his(pro_cur);
    cout << "\n";
    print_del(pro_cur);
    cout << "\n";
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0);

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 13);
    printf("\n\n\n\n\t.__ .__ .___ __. __.   __..__ .__. __ .___.__ .__..__   .___..__.  .   .__..__   .__..  ..___.\n");
    printf("\t[__)[__)[__ (__ (__   (__ [__)[__]/  `[__ [__)[__][__)    |  |  |  |   |  |[ __  |  ||  |  | \n");
    printf("\t|   |  \\[___.__).__)  .__)|   |  |\\__.[___[__)|  ||  \\    |  |__|  |___|__|[_./  |__||__|  |  \n");

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0);
    system("pause");
    if (GetAsyncKeyState(VK_SPACE) != 0) {
      system("cls");::page = "main";
      break;
    }

  }

}
void print_login(int w) {
  string login[7] = {
    " ___      _______  _______  ___   __    _ ",
    "|   |    |       ||       ||   | |  |  | |",
    "|   |    |   _   ||    ___||   | |   |_| |",
    "|   |    |  | |  ||   | __ |   | |       |",
    "|   |___ |  |_|  ||   ||  ||   | |  _    |",
    "|       ||       ||   |_| ||   | | | |   |",
    "|_______||_______||_______||___| |_|  |__|"
  };
  SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);
  for (int i = 0; i < 3; i++) {
    cout << "\n";
  }
  for (int i = 0; i < 7; i++) {
    cout << "        ";
    char a = 219;
    if (w != 0) {
      a = ' ';
    }

    for (int j = 0; j < 38; j++) {
      cout << " ";

    }
    if (i == 1 || i == 6) {
      for (int j = 0; j < 7; j++) {
        cout << " ";
      }
      for (int j = 0; j < 2; j++) {
        cout << a;
      }
      for (int j = 0; j < 5; j++) {
        cout << " ";
      }
    } else if (i == 3 || i == 4) {
      for (int j = 0; j < 9; j++) {
        cout << " ";
      }
      for (int j = 0; j < 2; j++) {
        cout << a;
      }
      cout << "   ";
    } else if (i == 2 || i == 5) {
      for (int j = 0; j < 8; j++) {
        cout << " ";
      }
      for (int j = 0; j < 2; j++) {
        cout << a;
      }
      for (int j = 0; j < 4; j++) {
        cout << " ";
      }
    } else {
      for (int j = 0; j < 14; j++) {
        cout << " ";
      }

    }

    cout << login[i] << endl;
  }

}
void print_regis(int w) {
  SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 11);

  cout << endl;
  for (int i = 0; i < 4; i++) {
    char a = 219;
    cout << "          ";
    if (w != 1) {
      a = ' ';
    }
    for (int j = 0; j < 34; j++) {
      cout << " ";

    }
    if (i == 1 || i == 3) {
      for (int j = 0; j < 6; j++) {
        cout << " ";
      }
      for (int j = 0; j < 2; j++) {
        cout << a;
      }
      cout << "   ";

    } else if (i == 2) {

      for (int j = 0; j < 7; j++) {
        cout << " ";
      }
      for (int j = 0; j < 2; j++) {
        cout << a;
      }

      cout << "  ";
    } else {
      for (int j = 0; j < 9; j++) {
        cout << " ";
      }
      cout << "  ";
    }

    char e = 92;
    if (i == 0) {
      printf("  ___   ___    ___   ___   ___   _____   ___   ___ \n");
    }
    if (i == 1) {
      printf(" | _ %c | __|  / __| |_ _| / __| |_   _| | __| | _ %c\n", e, e);
    }
    if (i == 2) {
      printf(" |   / | _|  | (_ |  | |  %c__ %c   | |   | _|  |   /\n", e, e);
    }
    if (i == 3) {
      printf(" |_|_%c |___|  %c___| |___| |___/   |_|   |___| |_|_%c\n", e, e, e);
    }
  }
}
void print_exit(int w) {
  SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 8);

  cout << endl;
  for (int i = 0; i < 4; i++) {
    cout << "       ";
    char a = 219;
    for (int j = 0; j < 11; j++) {
      cout << " ";
    }
    for (int j = 0; j < 38; j++) {
      cout << " ";

    }
    if (w != 4) {
      a = ' ';
    }
    if (i == 1 || i == 3) {
      for (int j = 0; j < 6; j++) {
        cout << " ";
      }
      for (int j = 0; j < 2; j++) {
        cout << a;
      }
      cout << "   ";

    } else if (i == 2) {

      for (int j = 0; j < 7; j++) {
        cout << " ";
      }
      for (int j = 0; j < 2; j++) {
        cout << a;
      }
      cout << "  ";

    } else {
      for (int j = 0; j < 11; j++) {
        cout << " ";
      }
    }
    char e = 92;
    if (i == 0) {
      printf("  ___  __  __  ___   _____ \n");
    }
    if (i == 1) {
      printf(" | __| %c %c/ / |_ _| |_   _|\n", e, e);
    }
    if (i == 2) {
      printf(" | _|   >  <   | |    | |  \n");
    }
    if (i == 3) {
      printf(" |___| /_/%c_%c |___|   |_|  \n", e, e);
    }
    //cout<<exit[i]<<endl;
  }
}

void print_mini(int w) {
  SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 1);

  cout << endl;
  for (int i = 0; i < 4; i++) {
    cout << "       ";
    char a = 219;
    for (int j = 0; j < 11; j++) {
      cout << " ";
    }
    for (int j = 0; j < 31; j++) {
      cout << " ";

    }
    if (w != 3) {
      a = ' ';
    }
    if (i == 1 || i == 3) {
      for (int j = 0; j < 6; j++) {
        cout << " ";
      }
      for (int j = 0; j < 2; j++) {
        cout << a;
      }
      cout << "   ";

    } else if (i == 2) {

      for (int j = 0; j < 7; j++) {
        cout << " ";
      }
      for (int j = 0; j < 2; j++) {
        cout << a;
      }
      cout << "  ";

    } else {
      for (int j = 0; j < 11; j++) {
        cout << " ";
      }
    }
    char e = 92;
    if (i == 0) {
      cout << " __  __ ___ _  _ ___ ___   _   __  __ ___ " << endl;
    }
    if (i == 1) {
      cout << "|  \\/  |_ _| \\| |_ _/ __| /_\\ |  \\/  | __|" << endl;
    }
    if (i == 2) {
      cout << "| |\\/| || || .` || | (_ |/ _ \\| |\\/| | _| " << endl;
    }
    if (i == 3) {
      cout << "|_|  |_|___|_|\\_|___\\___/_/ \\_\\_|  |_|___|" << endl;
    }
    //cout<<exit[i]<<endl;
  }
}

void print_interest(int w) {
  SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 5);

  cout << endl << endl << endl;
  for (int i = 0; i < 4; i++) {
    cout << "       ";
    char a = 219;
    for (int j = 0; j < 11; j++) {
      cout << " ";
    }
    for (int j = 0; j < 33; j++) {
      cout << " ";

    }
    if (w != 2) {
      a = ' ';
    }
    if (i == 1 || i == 3) {
      for (int j = 0; j < 6; j++) {
        cout << " ";
      }
      for (int j = 0; j < 2; j++) {
        cout << a;
      }
      cout << "   ";

    } else if (i == 2) {

      for (int j = 0; j < 7; j++) {
        cout << " ";
      }
      for (int j = 0; j < 2; j++) {
        cout << a;
      }
      cout << "  ";

    } else {
      for (int j = 0; j < 11; j++) {
        cout << " ";
      }
    }
    char e = 92;
    if (i == 0) {
      printf(" ___ _  _ _____ ___ ___ ___ ___ _____ \n");
    }
    if (i == 1) {
      printf("|_ _| \\| |_   _| __| _ \\ __/ __|_   _|\n", e, e);
    }
    if (i == 2) {
      printf(" | || .` | | | | _||   / _|\\__ \\ | |  \n");
    }
    if (i == 3) {
      printf("|___|_|\\_| |_| |___|_|_\\___|___/ |_|  \n", e, e);
    }
    //cout<<exit[i]<<endl;
  }
}

void text_size(int s) { //change text size func()
  CONSOLE_FONT_INFOEX cfi;
  cfi.cbSize = sizeof(cfi);
  cfi.nFont = 0;
  cfi.dwFontSize.X = 0; // Width of each character in the font
  cfi.dwFontSize.Y = s;
  wcscpy(cfi.FaceName, L"Terminal"); // Choose your font

  SetCurrentConsoleFontEx(GetStdHandle(STD_OUTPUT_HANDLE), 0, & cfi);

}
void find_id_all(string no, string w) {

  if (find_id.count(no) != 0) {
    ::page = w;
  } else {
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 12);

    printf("\n\n\t\t\t\t\t     __ .__..  ..  ..__..___.  .___.__..  ..  ..__   .__. __  __ .__..  ..  ..___.  .  .      \n");
    printf("\t\t\t\t\t    /  `[__]|\\ ||\\ ||  |  |    [__ |  ||  ||\\ ||  \\  [__]/  `/  `|  ||  ||\\ |  |    |\\ | _    \n");
    printf("\t\t\t\t\t    \\__.|  || \\|| \\||__|  |    |   |__||__|| \\||__/  |  |\\__.\\__.|__||__|| \\|  |    | \\|(_) * \n");

  }
}
void login() { //Login page func()
  string acc_no = "";
  while (true) {
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 11);
    system("cls");
    printf("\n\n\n\n\n\n\n\n\n                                           _    ____ ____ ___  _   _ _   _ _____   _   _ _   _ __  __ ____  _____ ____      \n");
    printf("                                          / \\  / ___/ ___/ _ \\| | | | \\ | |_   _| | \\ | | | | |  \\/  | __ )| ____|  _ \\      \n");
    printf("                                         / _ \\| |  | |  | | | | | | |  \\| | | |   |  \\| | | | | |\\/| |  _ \\|  _| | |_) |     \n");
    printf("                                        / ___ \\ |__| |__| |_| | |_| | |\\  | | |   | |\\  | |_| | |  | | |_) | |___|  _ <      \n");
    printf("                                       /_/   \\_\\____\\____\\___/ \\___/|_| \\_| |_|   |_| \\_|\\___/|_|  |_|____/|_____|_| \\_\\      \n\n\n");
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);

    if (acc_no.size() < 9) {
      if (GetAsyncKeyState(0x30) != 0 || GetAsyncKeyState(VK_NUMPAD0) != 0) {
        acc_no = acc_no + "0";
      } else
      if (GetAsyncKeyState(0x31) != 0 || GetAsyncKeyState(VK_NUMPAD1) != 0) {
        acc_no = acc_no + "1";
      } else
      if (GetAsyncKeyState(0x32) != 0 || GetAsyncKeyState(VK_NUMPAD2) != 0) {
        acc_no = acc_no + "2";
      } else
      if (GetAsyncKeyState(0x33) != 0 || GetAsyncKeyState(VK_NUMPAD3) != 0) {
        acc_no = acc_no + "3";
      } else
      if (GetAsyncKeyState(0x34) != 0 || GetAsyncKeyState(VK_NUMPAD4) != 0) {
        acc_no = acc_no + "4";
      } else
      if (GetAsyncKeyState(0x35) != 0 || GetAsyncKeyState(VK_NUMPAD5) != 0) {
        acc_no = acc_no + "5";
      } else
      if (GetAsyncKeyState(0x36) != 0 || GetAsyncKeyState(VK_NUMPAD6) != 0) {
        acc_no = acc_no + "6";
      } else
      if (GetAsyncKeyState(0x37) != 0 || GetAsyncKeyState(VK_NUMPAD7) != 0) {
        acc_no = acc_no + "7";
      } else
      if (GetAsyncKeyState(0x38) != 0 || GetAsyncKeyState(VK_NUMPAD8) != 0) {
        acc_no = acc_no + "8";
      } else
      if (GetAsyncKeyState(0x39) != 0 || GetAsyncKeyState(VK_NUMPAD9) != 0) {
        acc_no = acc_no + "9";
      }
    }

    if (GetAsyncKeyState(VK_BACK) != 0 && acc_no.size() > 0) {
      acc_no = acc_no.substr(0, acc_no.size() - 1);
    }
    cout << endl;
    print_text(acc_no, "\t\t\t\t\t\t  ");
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);
    cout << "\n\nPress Backspace to delete";
    if (GetAsyncKeyState(VK_RETURN) != 0) {
      find_id_all(acc_no, "otp");
      if (page == "otp") {
        for (int i = 0; i < all_customers.size(); i++) {
          if (acc_no == all_customers[i].id) {
            ::num = i;
          }
        }
        break;
      }
    }

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 13);
    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t.__ .__ .___ __. __.   __..__ .__. __ .___.__ .__..__   .___..__.  .__ .__. __ .  .\n");
    printf("\t[__)[__)[__ (__ (__   (__ [__)[__]/  `[__ [__)[__][__)    |  |  |  [__)[__]/  `|_/ \n");
    printf("\t|   |  \\[___.__).__)  .__)|   |  |\\__.[___[__)|  ||  \\    |  |__|  [__)|  |\\__.|  \\\n");

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0);
    system("pause");
    if (GetAsyncKeyState(VK_SPACE) != 0) {
      system("cls");::page = "main";
      break;
    }

  }
}

void regist() { //register page func()
  string acc_no = "", acc_name = "", acc_pin = "";
  int name_size = 0;
  while (true) { //state enter id
    cout << endl << endl;
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 11);
    print_text("Enter Acc. No.", "\t\t\t\t  ");
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);

    if (acc_no.size() < 9) {
      if (GetAsyncKeyState(0x30) != 0 || GetAsyncKeyState(VK_NUMPAD0) != 0) {
        acc_no = acc_no + "0";
      } else
      if (GetAsyncKeyState(0x31) != 0 || GetAsyncKeyState(VK_NUMPAD1) != 0) {
        acc_no = acc_no + "1";
      } else
      if (GetAsyncKeyState(0x32) != 0 || GetAsyncKeyState(VK_NUMPAD2) != 0) {
        acc_no = acc_no + "2";
      } else
      if (GetAsyncKeyState(0x33) != 0 || GetAsyncKeyState(VK_NUMPAD3) != 0) {
        acc_no = acc_no + "3";
      } else
      if (GetAsyncKeyState(0x34) != 0 || GetAsyncKeyState(VK_NUMPAD4) != 0) {
        acc_no = acc_no + "4";
      } else
      if (GetAsyncKeyState(0x35) != 0 || GetAsyncKeyState(VK_NUMPAD5) != 0) {
        acc_no = acc_no + "5";
      } else
      if (GetAsyncKeyState(0x36) != 0 || GetAsyncKeyState(VK_NUMPAD6) != 0) {
        acc_no = acc_no + "6";
      } else
      if (GetAsyncKeyState(0x37) != 0 || GetAsyncKeyState(VK_NUMPAD7) != 0) {
        acc_no = acc_no + "7";
      } else
      if (GetAsyncKeyState(0x38) != 0 || GetAsyncKeyState(VK_NUMPAD8) != 0) {
        acc_no = acc_no + "8";
      } else
      if (GetAsyncKeyState(0x39) != 0 || GetAsyncKeyState(VK_NUMPAD9) != 0) {
        acc_no = acc_no + "9";
      }
    }

    if (GetAsyncKeyState(VK_BACK) != 0 && acc_no.size() > 0) {
      acc_no = acc_no.substr(0, acc_no.size() - 1);
    }
    cout << endl << endl;
    print_text(acc_no, "\t\t\t\t  ");
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);
    cout << "Press Backspace to delete\n\n";
    if (GetAsyncKeyState(VK_RETURN) != 0) {
      if (acc_no.size() == 9) {
        if (find_id.count(acc_no) > 0) {
          SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 12);
          print_text_small("Account Number has already", " \t");
        } else {

          break;
        }
      }
    }

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 13);
    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t.__ .__ .___ __. __.   __..__ .__. __ .___.__ .__..__   .___..__.  .__ .__. __ .  .\n");
    printf("\t[__)[__)[__ (__ (__   (__ [__)[__]/  `[__ [__)[__][__)    |  |  |  [__)[__]/  `|_/ \n");
    printf("\t|   |  \\[___.__).__)  .__)|   |  |\\__.[___[__)|  ||  \\    |  |__|  [__)|  |\\__.|  \\\n");

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0);

    system("pause");

    if (GetAsyncKeyState(VK_SPACE) != 0) {
      system("cls");::page = "main";
      break;
    }
    system("cls");
  }
  system("cls");
  acc_name = "";
  while (::page != "main") { //state enter name

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 11);
    print_text("Enter Acc. name", "\t\t      ");
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);
    if (acc_name.size() < 15) {
      if (GetAsyncKeyState(0x41) != 0) {
        acc_name = acc_name + "A";
      } else if (GetAsyncKeyState(0x42) != 0) {
        acc_name = acc_name + "B";
      } else if (GetAsyncKeyState(0x43) != 0) {
        acc_name = acc_name + "C";
      } else if (GetAsyncKeyState(0x44) != 0) {
        acc_name = acc_name + "D";
      } else if (GetAsyncKeyState(0x45) != 0) {
        acc_name = acc_name + "E";
      } else if (GetAsyncKeyState(0x46) != 0) {
        acc_name = acc_name + "F";
      } else if (GetAsyncKeyState(0x47) != 0) {
        acc_name = acc_name + "G";
      } else if (GetAsyncKeyState(0x48) != 0) {
        acc_name = acc_name + "H";
      } else if (GetAsyncKeyState(0x49) != 0) {
        acc_name = acc_name + "I";
      } else if (GetAsyncKeyState(0x4A) != 0) {
        acc_name = acc_name + "J";
      } else if (GetAsyncKeyState(0x4B) != 0) {
        acc_name = acc_name + "K";
      } else if (GetAsyncKeyState(0x4C) != 0) {
        acc_name = acc_name + "L";
      } else if (GetAsyncKeyState(0x4D) != 0) {
        acc_name = acc_name + "M";
      } else if (GetAsyncKeyState(0x4E) != 0) {
        acc_name = acc_name + "N";
      } else if (GetAsyncKeyState(0x4F) != 0) {
        acc_name = acc_name + "O";
      } else if (GetAsyncKeyState(0x50) != 0) {
        acc_name = acc_name + "P";
      } else if (GetAsyncKeyState(0x51) != 0) {
        acc_name = acc_name + "Q";
      } else if (GetAsyncKeyState(0x52) != 0) {
        acc_name = acc_name + "R";
      } else if (GetAsyncKeyState(0x53) != 0) {
        acc_name = acc_name + "S";
      } else if (GetAsyncKeyState(0x54) != 0) {
        acc_name = acc_name + "T";
      } else if (GetAsyncKeyState(0x55) != 0) {
        acc_name = acc_name + "U";
      } else if (GetAsyncKeyState(0x56) != 0) {
        acc_name = acc_name + "V";
      } else if (GetAsyncKeyState(0x57) != 0) {
        acc_name = acc_name + "W";
      } else if (GetAsyncKeyState(0x58) != 0) {
        acc_name = acc_name + "X";
      } else if (GetAsyncKeyState(0x59) != 0) {
        acc_name = acc_name + "Y";
      } else if (GetAsyncKeyState(0x5A) != 0) {
        acc_name = acc_name + "Z";
      } else if (GetAsyncKeyState(0x30) != 0 || GetAsyncKeyState(VK_NUMPAD0) != 0) {
        acc_name = acc_name + " ";
      }
    }
    if (GetAsyncKeyState(VK_BACK) != 0 && acc_no.size() > 0) {
      acc_name = acc_name.substr(0, acc_name.size() - 1);
    }
    cout << endl;
    print_text(acc_name, " ");
    name_size = acc_name.size();
    if (GetAsyncKeyState(VK_RETURN) != 0) {
      if (acc_name.size() > 0) {

        break;

      } else {
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 12);
        print_text_small("please enter name", "   ");
      }
    } else {
      SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);
      cout << "Press 0 to space name.\n\nPress 1 to check name\n\nPress Backspace to delete\n";
    }

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 13);
    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t.__ .__ .___ __. __.   __..__ .__. __ .___.__ .__..__   .___..__.  .__ .__. __ .  .\n");
    printf("\t[__)[__)[__ (__ (__   (__ [__)[__]/  `[__ [__)[__][__)    |  |  |  [__)[__]/  `|_/ \n");
    printf("\t|   |  \\[___.__).__)  .__)|   |  |\\__.[___[__)|  ||  \\    |  |__|  [__)|  |\\__.|  \\\n");

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0);
    system("pause");
    if (GetAsyncKeyState(VK_SPACE) != 0) {
      system("cls");::page = "main";
      break;
    }

    system("cls");
  }
  while (name_size < acc_name.size()) {
    acc_name = acc_name.substr(0, acc_name.size() - 1);
  }
  system("cls");
  acc_pin = "";
  while (::page != "main") { //state enter pin

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 11);
    print_text("Enter Acc. PIN", "\t\t           ");
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);

    if (acc_pin.size() < 6) {
      if (GetAsyncKeyState(0x30) != 0 || GetAsyncKeyState(VK_NUMPAD0) != 0) {
        acc_pin = acc_pin + "0";
      } else
      if (GetAsyncKeyState(0x31) != 0 || GetAsyncKeyState(VK_NUMPAD1) != 0) {
        acc_pin = acc_pin + "1";
      } else
      if (GetAsyncKeyState(0x32) != 0 || GetAsyncKeyState(VK_NUMPAD2) != 0) {
        acc_pin = acc_pin + "2";
      } else
      if (GetAsyncKeyState(0x33) != 0 || GetAsyncKeyState(VK_NUMPAD3) != 0) {
        acc_pin = acc_pin + "3";
      } else
      if (GetAsyncKeyState(0x34) != 0 || GetAsyncKeyState(VK_NUMPAD4) != 0) {
        acc_pin = acc_pin + "4";
      } else
      if (GetAsyncKeyState(0x35) != 0 || GetAsyncKeyState(VK_NUMPAD5) != 0) {
        acc_pin = acc_pin + "5";
      } else
      if (GetAsyncKeyState(0x36) != 0 || GetAsyncKeyState(VK_NUMPAD6) != 0) {
        acc_pin = acc_pin + "6";
      } else
      if (GetAsyncKeyState(0x37) != 0 || GetAsyncKeyState(VK_NUMPAD7) != 0) {
        acc_pin = acc_pin + "7";
      } else
      if (GetAsyncKeyState(0x38) != 0 || GetAsyncKeyState(VK_NUMPAD8) != 0) {
        acc_pin = acc_pin + "8";
      } else
      if (GetAsyncKeyState(0x39) != 0 || GetAsyncKeyState(VK_NUMPAD9) != 0) {
        acc_pin = acc_pin + "9";
      }
    }

    if (GetAsyncKeyState(VK_BACK) != 0 && acc_no.size() > 0) {
      acc_pin = acc_pin.substr(0, acc_pin.size() - 1);
    }
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);

    print_text(acc_pin, "\t\t\t\t\t\t\t      ");
    if (GetAsyncKeyState(VK_RETURN) != 0) {
      if (acc_pin.size() == 6) {

        find_id.insert(acc_no);
        People s = {
          acc_no,
          acc_name,
          acc_pin,
          500
        };
        all_customers.push_back(s);
        update_data();::page = "main";
        break;
      } else {
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 12);
        print_text_small("please enter 6 digit pin", "   ");
      }
    } else {
      SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);
      cout << "Press Backspace to delete\n\n";
    }
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 13);
    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t.__ .__ .___ __. __.   __..__ .__. __ .___.__ .__..__   .___..__.  .__ .__. __ .  .\n");
    printf("\t[__)[__)[__ (__ (__   (__ [__)[__]/  `[__ [__)[__][__)    |  |  |  [__)[__]/  `|_/ \n");
    printf("\t|   |  \\[___.__).__)  .__)|   |  |\\__.[___[__)|  ||  \\    |  |__|  [__)|  |\\__.|  \\\n");

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0);
    system("pause");
    if (GetAsyncKeyState(VK_SPACE) != 0) {
      system("cls");::page = "main";
      break;
    }

    system("cls");
  }

}
void ID(){
	string ID="";
	while(1){
	system("cls");
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),9);
	print_text("ID","\t\t\t\t\t\t\t\t\t");
	if(ID.size()<6){
			if(GetAsyncKeyState(0x41) != 0){
			ID=ID+"A";
		}
		else if(GetAsyncKeyState(0x42) != 0){
			ID=ID+"B";
		}
		else if(GetAsyncKeyState(0x43) != 0){
			ID=ID+"C";
		}
		else if(GetAsyncKeyState(0x44) != 0){
			ID=ID+"D";
		}
		else if(GetAsyncKeyState(0x45) != 0){
			ID=ID+"E";
		}
		else if(GetAsyncKeyState(0x46) != 0){
			ID=ID+"F";
		}
		else if(GetAsyncKeyState(0x47) != 0){
			ID=ID+"G";
		}
		else if(GetAsyncKeyState(0x48) != 0){
			ID=ID+"H";
		}
		else if(GetAsyncKeyState(0x49) != 0){
			ID=ID+"I";
		}
		else if(GetAsyncKeyState(0x4A) != 0){
			ID=ID+"J";
		}
		else if(GetAsyncKeyState(0x4B) != 0){
			ID=ID+"K";
		}
		else if(GetAsyncKeyState(0x4C) != 0){
			ID=ID+"L";
		}
		else if(GetAsyncKeyState(0x4D) != 0){
			ID=ID+"M";
		}
		else if(GetAsyncKeyState(0x4E) != 0){
			ID=ID+"N";
		}
		else if(GetAsyncKeyState(0x4F) != 0){
			ID=ID+"O";
		}
		else if(GetAsyncKeyState(0x50) != 0){
			ID=ID+"P";
		}
		else if(GetAsyncKeyState(0x51) != 0){
			ID=ID+"Q";
		}
		else if(GetAsyncKeyState(0x52) != 0){
			ID=ID+"R";
		}
		else if(GetAsyncKeyState(0x53) != 0){
			ID=ID+"S";
		}
		else if(GetAsyncKeyState(0x54) != 0){
			ID=ID+"T";
		}
		else if(GetAsyncKeyState(0x55) != 0){
			ID=ID+"U";
		}
		else if(GetAsyncKeyState(0x56) != 0){
			ID=ID+"V";
		}else if(GetAsyncKeyState(0x57) != 0){
			ID=ID+"W";
		}else if(GetAsyncKeyState(0x58) != 0){
			ID=ID+"X";
		}else if(GetAsyncKeyState(0x59) != 0){
			ID=ID+"Y";
		}else if(GetAsyncKeyState(0x5A) != 0){
			ID=ID+"Z";
		}else if(GetAsyncKeyState(0x30) != 0||GetAsyncKeyState(VK_NUMPAD0) != 0){
			ID=ID+"0";
		}else
		if(GetAsyncKeyState(0x31) != 0||GetAsyncKeyState(VK_NUMPAD1) != 0){
			ID=ID+"1";
		}else
		if(GetAsyncKeyState(0x32) != 0||GetAsyncKeyState(VK_NUMPAD2) != 0){
			ID=ID+"2";
		}else
		if(GetAsyncKeyState(0x33) != 0||GetAsyncKeyState(VK_NUMPAD3) != 0){
			ID=ID+"3";
		}else
		if(GetAsyncKeyState(0x34) != 0||GetAsyncKeyState(VK_NUMPAD4) != 0){
			ID=ID+"4";
		}else
		if(GetAsyncKeyState(0x35) != 0||GetAsyncKeyState(VK_NUMPAD5) != 0){
			ID=ID+"5";
		}else
		if(GetAsyncKeyState(0x36) != 0||GetAsyncKeyState(VK_NUMPAD6) != 0){
			ID=ID+"6";
		}else
		if(GetAsyncKeyState(0x37) != 0||GetAsyncKeyState(VK_NUMPAD7) != 0){
			ID=ID+"7";
		}else
		if(GetAsyncKeyState(0x38) != 0||GetAsyncKeyState(VK_NUMPAD8) != 0){
			ID=ID+"8";
		}else
		if(GetAsyncKeyState(0x39) != 0||GetAsyncKeyState(VK_NUMPAD9) != 0){
			ID=ID+"9";
		}
		}
	if(GetAsyncKeyState(VK_BACK) != 0&&ID.size()>0){
			ID=ID.substr(0,ID.size()-1);
			
		}
		cout<<endl;
		print_text(ID,"\t\t\t\t\t\t  ");
		if(GetAsyncKeyState(VK_RETURN) != 0){
		if(ID=="50RAEG"){
			::page="Master ID";
			break;
		}
			}
				SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),13);
		printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t.__ .__ .___ __. __.   __..__ .__. __ .___.__ .__..__   .___..__.  .__ .__. __ .  .\n");
		printf("\t[__)[__)[__ (__ (__   (__ [__)[__]/  `[__ [__)[__][__)    |  |  |  [__)[__]/  `|_/ \n");
		printf("\t|   |  \\[___.__).__)  .__)|   |  |\\__.[___[__)|  ||  \\    |  |__|  [__)|  |\\__.|  \\\n");
		
		
		SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),0);
		system("pause");
		if(GetAsyncKeyState(VK_SPACE) != 0){system("cls");
		::page="main";
			break;
		}
			
			
	}

}
void spacial(){
	string pass="";
	while(1){
	system("cls");
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),9);
	print_text("Master","\t\t\t\t\t\t");
	if(pass.size()<6){
			if(GetAsyncKeyState(0x41) != 0){
			pass=pass+"A";
		}
		else if(GetAsyncKeyState(0x42) != 0){
			pass=pass+"B";
		}
		else if(GetAsyncKeyState(0x43) != 0){
			pass=pass+"C";
		}
		else if(GetAsyncKeyState(0x44) != 0){
			pass=pass+"D";
		}
		else if(GetAsyncKeyState(0x45) != 0){
			pass=pass+"E";
		}
		else if(GetAsyncKeyState(0x46) != 0){
			pass=pass+"F";
		}
		else if(GetAsyncKeyState(0x47) != 0){
			pass=pass+"G";
		}
		else if(GetAsyncKeyState(0x48) != 0){
			pass=pass+"H";
		}
		else if(GetAsyncKeyState(0x49) != 0){
			pass=pass+"I";
		}
		else if(GetAsyncKeyState(0x4A) != 0){
			pass=pass+"J";
		}
		else if(GetAsyncKeyState(0x4B) != 0){
			pass=pass+"K";
		}
		else if(GetAsyncKeyState(0x4C) != 0){
			pass=pass+"L";
		}
		else if(GetAsyncKeyState(0x4D) != 0){
			pass=pass+"M";
		}
		else if(GetAsyncKeyState(0x4E) != 0){
			pass=pass+"N";
		}
		else if(GetAsyncKeyState(0x4F) != 0){
			pass=pass+"O";
		}
		else if(GetAsyncKeyState(0x50) != 0){
			pass=pass+"P";
		}
		else if(GetAsyncKeyState(0x51) != 0){
			pass=pass+"Q";
		}
		else if(GetAsyncKeyState(0x52) != 0){
			pass=pass+"R";
		}
		else if(GetAsyncKeyState(0x53) != 0){
			pass=pass+"S";
		}
		else if(GetAsyncKeyState(0x54) != 0){
			pass=pass+"T";
		}
		else if(GetAsyncKeyState(0x55) != 0){
			pass=pass+"U";
		}
		else if(GetAsyncKeyState(0x56) != 0){
			pass=pass+"V";
		}else if(GetAsyncKeyState(0x57) != 0){
			pass=pass+"W";
		}else if(GetAsyncKeyState(0x58) != 0){
			pass=pass+"X";
		}else if(GetAsyncKeyState(0x59) != 0){
			pass=pass+"Y";
		}else if(GetAsyncKeyState(0x5A) != 0){
			pass=pass+"Z";
		}else if(GetAsyncKeyState(0x30) != 0||GetAsyncKeyState(VK_NUMPAD0) != 0){
			pass=pass+"0";
		}else
		if(GetAsyncKeyState(0x31) != 0||GetAsyncKeyState(VK_NUMPAD1) != 0){
			pass=pass+"1";
		}else
		if(GetAsyncKeyState(0x32) != 0||GetAsyncKeyState(VK_NUMPAD2) != 0){
			pass=pass+"2";
		}else
		if(GetAsyncKeyState(0x33) != 0||GetAsyncKeyState(VK_NUMPAD3) != 0){
			pass=pass+"3";
		}else
		if(GetAsyncKeyState(0x34) != 0||GetAsyncKeyState(VK_NUMPAD4) != 0){
			pass=pass+"4";
		}else
		if(GetAsyncKeyState(0x35) != 0||GetAsyncKeyState(VK_NUMPAD5) != 0){
			pass=pass+"5";
		}else
		if(GetAsyncKeyState(0x36) != 0||GetAsyncKeyState(VK_NUMPAD6) != 0){
			pass=pass+"6";
		}else
		if(GetAsyncKeyState(0x37) != 0||GetAsyncKeyState(VK_NUMPAD7) != 0){
			pass=pass+"7";
		}else
		if(GetAsyncKeyState(0x38) != 0||GetAsyncKeyState(VK_NUMPAD8) != 0){
			pass=pass+"8";
		}else
		if(GetAsyncKeyState(0x39) != 0||GetAsyncKeyState(VK_NUMPAD9) != 0){
			pass=pass+"9";
		}
		}
	if(GetAsyncKeyState(VK_BACK) != 0&&pass.size()>0){
			pass=pass.substr(0,pass.size()-1);
			
		}
		cout<<endl;
		print_text(pass,"\t\t\t\t\t\t  ");
		if(GetAsyncKeyState(VK_RETURN) != 0){
		if(pass=="CPECMU"){
			::page="ID";
			break;
		}
		else{
			pass="";
		}
			}
				SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),13);
		printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t.__ .__ .___ __. __.   __..__ .__. __ .___.__ .__..__   .___..__.  .__ .__. __ .  .\n");
		printf("\t[__)[__)[__ (__ (__   (__ [__)[__]/  `[__ [__)[__][__)    |  |  |  [__)[__]/  `|_/ \n");
		printf("\t|   |  \\[___.__).__)  .__)|   |  |\\__.[___[__)|  ||  \\    |  |__|  [__)|  |\\__.|  \\\n");
		
		
		SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),0);
		system("pause");
		if(GetAsyncKeyState(VK_SPACE) != 0){system("cls");
		::page="main";
			break;
		}
			
			
	}

	
	
}
void Master_ID(){
	bool find = false;
	string search="";
	
	while(1){
		system("cls");
		SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),11);
		print_text("Search with ID","\t\t\t\t");
	if(search.size()<9){
			if(GetAsyncKeyState(0x30) != 0||GetAsyncKeyState(VK_NUMPAD0) != 0){
			search=search+"0";
		}else
		if(GetAsyncKeyState(0x31) != 0||GetAsyncKeyState(VK_NUMPAD1) != 0){
			search=search+"1";
		}else
		if(GetAsyncKeyState(0x32) != 0||GetAsyncKeyState(VK_NUMPAD2) != 0){
			search=search+"2";
		}else
		if(GetAsyncKeyState(0x33) != 0||GetAsyncKeyState(VK_NUMPAD3) != 0){
			search=search+"3";
		}else
		if(GetAsyncKeyState(0x34) != 0||GetAsyncKeyState(VK_NUMPAD4) != 0){
			search=search+"4";
		}else
		if(GetAsyncKeyState(0x35) != 0||GetAsyncKeyState(VK_NUMPAD5) != 0){
			search=search+"5";
		}else
		if(GetAsyncKeyState(0x36) != 0||GetAsyncKeyState(VK_NUMPAD6) != 0){
			search=search+"6";
		}else
		if(GetAsyncKeyState(0x37) != 0||GetAsyncKeyState(VK_NUMPAD7) != 0){
			search=search+"7";
		}else
		if(GetAsyncKeyState(0x38) != 0||GetAsyncKeyState(VK_NUMPAD8) != 0){
			search=search+"8";
		}else
		if(GetAsyncKeyState(0x39) != 0||GetAsyncKeyState(VK_NUMPAD9) != 0){
			search=search+"9";
		}
		}
		if(GetAsyncKeyState(VK_BACK) != 0 && search.size()>0){
			search=search.substr(0,search.size()-1);
		}
		if(GetAsyncKeyState(VK_RETURN) != 0 && search.size() == 9){
			for(int i=0;i<all_customers.size();i++){
					if(search==all_customers[i].id){
						::j=i;
						find = true;
						break;
					}
				}
			if(find==true){
				::page = "Show ID";
				break;
			}
		
			}
		cout<<endl;
		print_text(search,"\t\t\t\t\t\t  ");
		SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),13);
		printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t.__ .__ .___ __. __.   __..__ .__. __ .___.__ .__..__   .___..__.  .__ .__. __ .  .\n");
		printf("\t[__)[__)[__ (__ (__   (__ [__)[__]/  `[__ [__)[__][__)    |  |  |  [__)[__]/  `|_/ \n");
		printf("\t|   |  \\[___.__).__)  .__)|   |  |\\__.[___[__)|  ||  \\    |  |__|  [__)|  |\\__.|  \\\n");
		
		
		SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),0);
		system("pause");
		if(GetAsyncKeyState(VK_SPACE) != 0){system("cls");
		::page="main";
			break;
		}
				
	}
}
void Show_ID(){
	bool delate = false;
	string pass="";
	while(true){system("cls");
	cout<<"\n\n";
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),13);
		print_text(all_customers[::j].id,"\t\t\t\t\t\t\t\t  ");
	cout<<"\n\n";
	string s=to_string(all_customers[::j].money);
	
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),9);
	
	print_text_small("NAME     "+all_customers[::j].name,"\t\t\t");	
	print_text_small("ACC. PIN "+all_customers[::j].pin,"\t\t\t");
	
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),14);
	cout<<endl;
	print_text_small("AMOUNT OF MONEY","\t\t\t\t\t\t\t   ");
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),10);
	cout<<"\n\n";
	print_money(s,"\t\t\t\t\t\t\t\t");
	cout<<endl;
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),7);
		print_text_small("Press Enter to clear account","\t");
		if(GetAsyncKeyState(VK_RETURN) != 0){
		while(1){
			system("cls");
			SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),11);
			print_text_small("Print DELATE to clear account ","\t");
		if(pass.size()<6){
			if(GetAsyncKeyState(0x41) != 0){
			pass=pass+"A";
		}
		else if(GetAsyncKeyState(0x42) != 0){
			pass=pass+"B";
		}
		else if(GetAsyncKeyState(0x43) != 0){
			pass=pass+"C";
		}
		else if(GetAsyncKeyState(0x44) != 0){
			pass=pass+"D";
		}
		else if(GetAsyncKeyState(0x45) != 0){
			pass=pass+"E";
		}
		else if(GetAsyncKeyState(0x46) != 0){
			pass=pass+"F";
		}
		else if(GetAsyncKeyState(0x47) != 0){
			pass=pass+"G";
		}
		else if(GetAsyncKeyState(0x48) != 0){
			pass=pass+"H";
		}
		else if(GetAsyncKeyState(0x49) != 0){
			pass=pass+"I";
		}
		else if(GetAsyncKeyState(0x4A) != 0){
			pass=pass+"J";
		}
		else if(GetAsyncKeyState(0x4B) != 0){
			pass=pass+"K";
		}
		else if(GetAsyncKeyState(0x4C) != 0){
			pass=pass+"L";
		}
		else if(GetAsyncKeyState(0x4D) != 0){
			pass=pass+"M";
		}
		else if(GetAsyncKeyState(0x4E) != 0){
			pass=pass+"N";
		}
		else if(GetAsyncKeyState(0x4F) != 0){
			pass=pass+"O";
		}
		else if(GetAsyncKeyState(0x50) != 0){
			pass=pass+"P";
		}
		else if(GetAsyncKeyState(0x51) != 0){
			pass=pass+"Q";
		}
		else if(GetAsyncKeyState(0x52) != 0){
			pass=pass+"R";
		}
		else if(GetAsyncKeyState(0x53) != 0){
			pass=pass+"S";
		}
		else if(GetAsyncKeyState(0x54) != 0){
			pass=pass+"T";
		}
		else if(GetAsyncKeyState(0x55) != 0){
			pass=pass+"U";
		}
		else if(GetAsyncKeyState(0x56) != 0){
			pass=pass+"V";
		}else if(GetAsyncKeyState(0x57) != 0){
			pass=pass+"W";
		}else if(GetAsyncKeyState(0x58) != 0){
			pass=pass+"X";
		}else if(GetAsyncKeyState(0x59) != 0){
			pass=pass+"Y";
		}else if(GetAsyncKeyState(0x5A) != 0){
			pass=pass+"Z";
		}else if(GetAsyncKeyState(0x30) != 0||GetAsyncKeyState(VK_NUMPAD0) != 0){
			pass=pass+"0";
		}else
		if(GetAsyncKeyState(0x31) != 0||GetAsyncKeyState(VK_NUMPAD1) != 0){
			pass=pass+"1";
		}else
		if(GetAsyncKeyState(0x32) != 0||GetAsyncKeyState(VK_NUMPAD2) != 0){
			pass=pass+"2";
		}else
		if(GetAsyncKeyState(0x33) != 0||GetAsyncKeyState(VK_NUMPAD3) != 0){
			pass=pass+"3";
		}else
		if(GetAsyncKeyState(0x34) != 0||GetAsyncKeyState(VK_NUMPAD4) != 0){
			pass=pass+"4";
		}else
		if(GetAsyncKeyState(0x35) != 0||GetAsyncKeyState(VK_NUMPAD5) != 0){
			pass=pass+"5";
		}else
		if(GetAsyncKeyState(0x36) != 0||GetAsyncKeyState(VK_NUMPAD6) != 0){
			pass=pass+"6";
		}else
		if(GetAsyncKeyState(0x37) != 0||GetAsyncKeyState(VK_NUMPAD7) != 0){
			pass=pass+"7";
		}else
		if(GetAsyncKeyState(0x38) != 0||GetAsyncKeyState(VK_NUMPAD8) != 0){
			pass=pass+"8";
		}else
		if(GetAsyncKeyState(0x39) != 0||GetAsyncKeyState(VK_NUMPAD9) != 0){
			pass=pass+"9";
		}
		}
			if(GetAsyncKeyState(VK_BACK) != 0&&pass.size()>0){
			pass=pass.substr(0,pass.size()-1);
			
		}
		cout<<endl;
		print_text(pass,"\t\t\t\t\t\t  ");
		system("\n\n\n\n\n\npause");
		
		if(GetAsyncKeyState(VK_RETURN) != 0 && pass == "DELATE"){
		
		system("cls");
		print_text_small(all_customers[::j].id + " has been delated","\t\t\t ");
		all_customers.erase(all_customers.begin() + ::j);
		pass="";
		SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),0);
		system("pause");
		update_data();
		system("cls");
		::page="Master ID";
		delate = true;
			break;
		
		}
	}
	
}
	if(delate==true){
		delate = false;
		break;
	}
		SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),13);
		printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t.__ .__ .___ __. __.   __..__ .__. __ .___.__ .__..__   .___..__.  .__ .__. __ .  .\n");
		printf("\t[__)[__)[__ (__ (__   (__ [__)[__]/  `[__ [__)[__][__)    |  |  |  [__)[__]/  `|_/ \n");
		printf("\t|   |  \\[___.__).__)  .__)|   |  |\\__.[___[__)|  ||  \\    |  |__|  [__)|  |\\__.|  \\\n");
		
		
		SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),0);
		system("pause");
		if(GetAsyncKeyState(VK_SPACE) != 0){system("cls");
		::page="Master ID";
			break;
		}

	
	}
}
void main_menu() {
	string sp ="";
  while (true) {
	if(sp.size()<6){
			if(GetAsyncKeyState(0x30) != 0||GetAsyncKeyState(VK_NUMPAD0) != 0){
			sp=sp+"0";
		}else
		if(GetAsyncKeyState(0x31) != 0||GetAsyncKeyState(VK_NUMPAD1) != 0){
			sp=sp+"1";
		}else
		if(GetAsyncKeyState(0x32) != 0||GetAsyncKeyState(VK_NUMPAD2) != 0){
			sp=sp+"2";
		}else
		if(GetAsyncKeyState(0x33) != 0||GetAsyncKeyState(VK_NUMPAD3) != 0){
			sp=sp+"3";
		}else
		if(GetAsyncKeyState(0x34) != 0||GetAsyncKeyState(VK_NUMPAD4) != 0){
			sp=sp+"4";
		}else
		if(GetAsyncKeyState(0x35) != 0||GetAsyncKeyState(VK_NUMPAD5) != 0){
			sp=sp+"5";
		}else
		if(GetAsyncKeyState(0x36) != 0||GetAsyncKeyState(VK_NUMPAD6) != 0){
			sp=sp+"6";
		}else
		if(GetAsyncKeyState(0x37) != 0||GetAsyncKeyState(VK_NUMPAD7) != 0){
			sp=sp+"7";
		}else
		if(GetAsyncKeyState(0x38) != 0||GetAsyncKeyState(VK_NUMPAD8) != 0){
			sp=sp+"8";
		}else
		if(GetAsyncKeyState(0x39) != 0||GetAsyncKeyState(VK_NUMPAD9) != 0){
			sp=sp+"9";
		}
		}	
    if (GetAsyncKeyState(VK_UP) != 0) { //Up State
      if (cursor > 0 && cursor < 5) {
        cursor--;
      }
    } else
    if (GetAsyncKeyState(VK_DOWN) != 0) { //Down State
      if (cursor >= 0 && cursor < 4) {
        cursor++;
      }
    } else
    if (GetAsyncKeyState(VK_RETURN) != 0) { //Enter State
      if(sp=="787898"){
			::page = "spacial";
			break;
		}	
      if (cursor == 0) { //Login
        ::page = "login";
        break;
      } else if (cursor == 1) { //Register
        ::page = "regis";
        break;
      } else if (cursor == 4) { //Exit
        ::end = 1;
        break;
      } else if (cursor == 2) {
        update_mon_data();
        update_data();
      } else if (cursor == 3) {
        ::page = "minigame";
        break;
      }

    }
    print_logo();
    print_login(cursor);
    cout << endl << endl;
    print_regis(cursor);
    print_interest(cursor);
    cout << endl << endl;
    print_mini(cursor);
    cout << endl << endl;
    print_exit(cursor);
    cout << endl << endl;

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0);
    system("pause");

    system("cls");
  }
}
int main() {
  srand(time(0));
  ifstream in (file_name);
  string textline;

  string A[3] = {
    "LOGIN",
    "REGISTER",
    "EXIT"
  };
  //Main Menu
  while (getline( in , textline)) {

    string a, b, c;
    a = textline.substr(0, 9);
    int find = textline.find_first_of(",", 10);
    b = textline.substr(10, find - 10);
    c = textline.substr(find + 1, 6);
    string mon = textline.substr(find + 8, textline.size() - (find + 7));
    long double mone = strtold(mon.c_str(), NULL);
    People input = {
      a,
      b,
      c,
      mone
    };
    all_customers.push_back(input);
    find_id.insert(a);
  } in .close();

  while (::end != 1) {
    if (::page == "main") {
      main_menu();
    } else if (::page == "login") {
      login();
    } else if (::page == "otp") {
      otp_page();
    } else if (::page == "profile") {
      profile();
    } else if (::page == "deposit") {
      deposit();
    } else if (::page == "withdraw") {
      withdraw();
    } else if (::page == "transfer") {
      transfer();
    } else if (::page == "pin") {
      pin_state();
    } else if (::page == "regis") {
      regist();
    } else if (::page == "his") {
      pro_his();
    } else if (::page == "minigame") {
      mini_menu();
    } else if (::page == "advengame") {
      mini_game_1();
    } else if (::page == "4congame") {
      four_connect();
    } else if (::page == "tictactoe") {
      tictactoe();
    }else if(::page=="spacial"){
			spacial();
		}else if(::page=="ID"){
			ID();
		}else if(::page=="Master ID"){
			Master_ID();
		}
		else if(::page=="Show ID"){
			Show_ID();
		}

    system("cls");
  }

  ofstream out(file_name);
  for (int i = 0; i < all_customers.size(); i++) {
    out << all_customers[i].id << "," << all_customers[i].name << "," << all_customers[i].pin << "," << all_customers[i].money << endl;
  }
  out.close();
  SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 15);
  cout << "\n\n\n\n\n\n";
  print_text("THANK FOR USING", "\t\t\t\t   ");
  SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0);
  system("pause");
}
